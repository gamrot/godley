[{"path":"https://gamrot.github.io/godley/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://gamrot.github.io/godley/articles/01_Model_SIM.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model SIM","text":"Start initializing empty SFC (Stock-Flow Consistent) model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, calculate baseline scenario 100 periods using Newton method) simulation estimated, visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_sim <- create_model(name = \"SFC SIM\") #> Empty model created # Add variables model_sim <- model_sim |>   add_variable(\"C_d\", desc = \"Consumption demand by households\") |>   add_variable(\"C_s\", desc = \"Consumption supply\") |>   add_variable(\"G_s\", desc = \"Government supply\") |>   add_variable(\"H_h\", desc = \"Cash money held by households\") |>   add_variable(\"H_s\", desc = \"Cash money supplied by the government\") |>   add_variable(\"N_d\", desc = \"Demand for labor\") |>   add_variable(\"N_s\", desc = \"Supply of labor\") |>   add_variable(\"T_d\", desc = \"Taxes, demand\") |>   add_variable(\"T_s\", desc = \"Taxes, supply\") |>   add_variable(\"Y\", desc = \"Income = GDP\") |>   add_variable(\"Yd\", desc = \"Disposable income of households\") |>   add_variable(\"alpha1\", init = 0.6, desc = \"Propensity to consume out of income\") |>   add_variable(\"alpha2\", init = 0.4, desc = \"Propensity to consume out of wealth\") |>   add_variable(\"theta\", init = 0.2, desc = \"Tax rate\") |>   add_variable(\"G_d\", init = 20, desc = \"Government demand\") |>   add_variable(\"W\", init = 1, desc = \"Wage rate\") # Add equations model_sim <- model_sim |>   add_equation(\"C_s = C_d\", desc = \"Consumption\") |>   add_equation(\"G_s = G_d\") |>   add_equation(\"T_s = T_d\") |>   add_equation(\"N_s = N_d\") |>   add_equation(\"Yd = W * N_s - T_s\") |>   add_equation(\"T_d = theta * W * N_s\") |>   add_equation(\"C_d = alpha1 * Yd + alpha2 * H_h[-1]\") |>   add_equation(\"H_s = G_d - T_d + H_s[-1]\") |>   add_equation(\"H_h = Yd - C_d + H_h[-1]\") |>   add_equation(\"Y = C_s + G_s\") |>   add_equation(\"N_d = Y/W\") |>   add_equation(\"H_s = H_h\", desc = \"Money equilibrium\", hidden = TRUE) # Simulate model model_sim <- simulate_scenario(model_sim,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-05, method = \"Newton\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_sim, scenario = c(\"baseline\"), from = 1, to = 50,   expressions = c(\"Y\", \"C_d\", \"G_s\") )"},{"path":"https://gamrot.github.io/godley/articles/01_Model_SIM.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model SIM","text":"godley package can simulate shocks affect economy (specifically, impact base scenario). example, apply permanent increase government expenditures. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Finally, compare results base scenario shock scenario.","code":"# Create empty shock shock_sim <- create_shock() #> Shock object created # Add shock equation with increased government expenditures shock_sim <- add_shock(shock_sim,   variable = \"G_d\",   value = 25,   desc = \"Increase in government expenditures\", start = 5, end = 50 ) # Create new scenario with this shock model_sim <- add_scenario(model_sim,   name = \"expansion\", origin = \"baseline\", shock = shock_sim ) # Simulate shock model_sim <- simulate_scenario(model_sim,   scenario = \"expansion\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-05, method = \"Newton\" ) #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_sim, scenario = c(\"baseline\", \"expansion\"), from = 1, to = 50,   expressions = c(\"Y\") ) plot_simulation(   model = model_sim, scenario = c(\"baseline\", \"expansion\"), from = 1, to = 50,   expressions = c(\"C_d\") ) plot_simulation(   model = model_sim, scenario = c(\"baseline\", \"expansion\"), from = 1, to = 50,   expressions = c(\"G_s\") )"},{"path":"https://gamrot.github.io/godley/articles/01_Model_SIM.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model SIM","text":"details SIM model, refer Chapter 3 Monetary Economics: Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/02_Model_SIMEX.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model SIMEX","text":"Start initializing empty SFC (Stock-Flow Consistent) model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, calculate baseline scenario 100 periods using Newton method) simulation estimated, visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_simex <- create_model(name = \"SFC SIMEX\") #> Empty model created # Add variables model_simex <- model_simex |>   add_variable(\"C_d\", desc = \"Consumption demand by households\") |>   add_variable(\"C_s\", desc = \"Consumption supply\") |>   add_variable(\"G_s\", desc = \"Government supply\") |>   add_variable(\"T_d\", desc = \"Taxes, demand\") |>   add_variable(\"T_s\", desc = \"Taxes, supply\") |>   add_variable(\"N_d\", desc = \"Demand for labor\") |>   add_variable(\"N_s\", desc = \"Supply of labor\") |>   add_variable(\"H_h\", desc = \"Cash money held by households\") |>   add_variable(\"H_s\", desc = \"Cash money supplied by the government\") |>   add_variable(\"H_d\", desc = \"Cash money demanded by the government\") |>   add_variable(\"Y\", desc = \"Income = GDP\") |>   add_variable(\"Yd\", desc = \"Disposable income of households\") |>   add_variable(\"Yd_e\", desc = \"Expected disposable income of households\") |>   add_variable(\"alpha1\", init = 0.6, desc = \"Propensity to consume out of income\") |>   add_variable(\"alpha2\", init = 0.4, desc = \"Propensity to consume out of wealth\") |>   add_variable(\"theta\", init = 0.2, desc = \"Tax rate\") |>   add_variable(\"G_d\", init = 20, desc = \"Government demand\") |>   add_variable(\"W\", init = 1, desc = \"Wage rate\") # Add equations model_simex <- model_simex |>   add_equation(\"C_s = C_d\", desc = \"Consumption\") |>   add_equation(\"G_s = G_d\") |>   add_equation(\"T_s = T_d\") |>   add_equation(\"N_s = N_d\") |>   add_equation(\"Yd = W * N_s - T_s\") |>   add_equation(\"T_d = theta * W * N_s\") |>   add_equation(\"C_d = alpha1 * Yd_e + alpha2 * H_h[-1]\") |>   add_equation(\"H_s = G_d - T_d + H_s[-1]\") |>   add_equation(\"H_h = Yd - C_d + H_h[-1]\") |>   add_equation(\"Y = C_s + G_s\") |>   add_equation(\"N_d = Y/W\") |>   add_equation(\"H_d = Yd_e - C_d + H_h[-1]\") |>   add_equation(\"Yd_e = Yd[-1]\") |>   add_equation(\"H_s = H_h\", desc = \"Money equilibrium\", hidden = TRUE) # Simulate model model_simex <- simulate_scenario(model_simex,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-05, method = \"Newton\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_simex, scenario = c(\"baseline\"), from = 1, to = 50,   expressions = c(\"Y\", \"C_d\", \"C_s / alpha1\") )"},{"path":"https://gamrot.github.io/godley/articles/02_Model_SIMEX.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model SIMEX","text":"godley package can simulate shocks affect economy (specifically, impact base scenario). example, introduce increase government expenditures. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Finally, plot simulation outcomes:","code":"# Create empty shock shock_simex <- create_shock() #> Shock object created # Add shock equation with increased government expenditures shock_simex <- add_shock(shock_simex,   variable = \"G_d\", value = 25,   desc = \"Increase in government expenditures\", start = 5, end = 50 ) # Create new scenario with this shock model_simex <- add_scenario(model_simex,   name = \"expansion\", origin = \"baseline\", shock = shock_simex ) # Simulate shock model_simex <- simulate_scenario(model_simex,   scenario = \"expansion\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_simex, scenario = c(\"expansion\"), from = 1, to = 50,   expressions = c(\"Y\", \"C_d\", \"C_s / alpha1\") )"},{"path":"https://gamrot.github.io/godley/articles/02_Model_SIMEX.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model SIMEX","text":"details SIMEX model, refer Chapter 3 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/03_Model_PC.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model PC","text":"Start initializing empty SFC (Stock-Flow Consistent) model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, calculate baseline scenario 100 periods using Gauss method) simulation estimated, visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_pc <- create_model(name = \"SFC PC\") #> Empty model created # Add variables model_pc <- model_pc |>   add_variable(\"B_cb\", desc = \"\") |>   add_variable(\"H_s\", desc = \"\") |>   add_variable(\"B_s\", desc = \"\") |>   add_variable(\"B_h\", desc = \"\") |>   add_variable(\"H_h1\", desc = \"\") |>   add_variable(\"H_h\", desc = \"\") |>   add_variable(\"C\", desc = \"\") |>   add_variable(\"V\", desc = \"\") |>   add_variable(\"T_x\", desc = \"\") |>   add_variable(\"Y\", desc = \"Income = GDP\") |>   add_variable(\"Yd\", desc = \"Disposable income of households\") |>   add_variable(\"alpha1\", init = 0.6, desc = \"Propensity to consume out of income\") |>   add_variable(\"alpha2\", init = 0.4, desc = \"Propensity to consume out of wealth\") |>   add_variable(\"theta\", init = 0.2, desc = \"Tax rate\") |>   add_variable(\"r\", init = 0.025, desc = \"\") |>   add_variable(\"G\", init = 20, desc = \"Government demand\") |>   add_variable(\"lambda0\", init = 0.635, desc = \"\") |>   add_variable(\"lambda1\", init = 0.05, desc = \"\") |>   add_variable(\"lambda2\", init = 0.01, desc = \"\") # Add equations model_pc <- model_pc |>   add_equation(\"Y = C + G\", desc = \"\") |>   add_equation(\"Yd = Y - T_x + r[-1] * B_h[-1]\") |>   add_equation(\"T_x = theta * (Y + r[-1] * B_h[-1])\") |>   add_equation(\"V = V[-1] + (Yd - C)\") |>   add_equation(\"C = alpha1 * Yd + alpha2 * V[-1]\") |>   add_equation(\"H_h = V - B_h\") |>   add_equation(\"H_h1 = V * ((1 - lambda0) - lambda1 * r + lambda2 * ( Yd/V ))\") |>   add_equation(\"B_h = V * (lambda0 + lambda1 * r - lambda2 * ( Yd/V ))\") |>   add_equation(\"B_s = B_s[-1] + (G + r[-1] * B_s[-1]) - (T_x + r[-1] * B_cb[-1])\") |>   add_equation(\"H_s = H_s[-1] + B_cb - B_cb[-1]\") |>   add_equation(\"B_cb = B_s - B_h\") |>   add_equation(\"H_h = H_s\", hidden = T) # Simulate model model_pc <- simulate_scenario(model_pc,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_pc, scenario = c(\"baseline\"), from = 1, to = 100,   expressions = c(\"B_h / V\") ) # Plot results plot_simulation(   model = model_pc, scenario = c(\"baseline\"), from = 1, to = 100,   expressions = c(\"H_h / V\") )"},{"path":"https://gamrot.github.io/godley/articles/03_Model_PC.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model PC","text":"godley package can simulate shocks affect economy (specifically, impact base scenario). example propose implement increased rate interest bills. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Finally, plot simulation outcomes:","code":"# Create empty shock shock_pc <- create_shock() #> Shock object created # Add shock equation with increased rate of interest on bills shock_pc <- add_shock(shock_pc,   variable = \"r\",   value = 0.035,   desc = \"Increase in the rate of interest on bills\",   start = 5, end = 50 ) # Create new scenario with this shock model_pc <- add_scenario(model_pc,   name = \"expansion\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_pc ) # Simulate shock model_pc <- simulate_scenario(model_pc,   scenario = \"expansion\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_pc, scenario = c(\"expansion\"), from = 1, to = 50,   expressions = c(\"B_h / V\") ) # Plot results plot_simulation(   model = model_pc, scenario = c(\"expansion\"), from = 1, to = 50,   expressions = c(\"H_h / V\") )"},{"path":"https://gamrot.github.io/godley/articles/03_Model_PC.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model PC","text":"details PC model, refer Chapter 4 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/04_Model_LP.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model LP","text":"Start initializing empty SFC (Stock-Flow Consistent) model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, calculate baseline scenario 100 periods using Gauss method) simulation estimated, visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_lp <- create_model(name = \"SFC LP\") #> Empty model created # Add variables model_lp <- model_lp |>   add_variable(\"Y\", desc = \"\") |>   add_variable(\"YDr\") |>   add_variable(\"TX\") |>   add_variable(\"V\", init = 0.0000001) |>   add_variable(\"CG\") |>   add_variable(\"C\") |>   add_variable(\"VE\", init = 0.0000001) |>   add_variable(\"Hh\") |>   add_variable(\"Hd\") |>   add_variable(\"Bd\") |>   add_variable(\"BLd\") |>   add_variable(\"BLh\", desc = \"\") |>   add_variable(\"Bs\", desc = \"\") |>   add_variable(\"Hs\", desc = \"\") |>   add_variable(\"Bcb\", desc = \"\") |>   add_variable(\"BLs\", desc = \"\") |>   add_variable(\"ERrbl\", desc = \"\") |>   add_variable(\"rbl\", desc = \"\") |>   add_variable(\"CGE\", desc = \"\") |>   add_variable(\"YDEr\", desc = \"\") |>   add_variable(\"pebl\", desc = \"\") |>   add_variable(\"Bh\", desc = \"\") |>   add_variable(\"alpha1\", init = 0.8, desc = \"Propensity to consume out of income\") |>   add_variable(\"alpha2\", init = 0.2, desc = \"Propensity to consume out of wealth\") |>   add_variable(\"theta\", init = 0.1938, desc = \"Tax rate\") |>   add_variable(\"rb\", init = 0.03, desc = \"\") |>   add_variable(\"G\", init = 20, desc = \"Government demand\") |>   add_variable(\"pbl\", init = 20, desc = \"\") |>   add_variable(\"lambda20\", init = 0.44196, desc = \"\") |>   add_variable(\"lambda22\", init = 1.1, desc = \"\") |>   add_variable(\"lambda23\", init = -1, desc = \"\") |>   add_variable(\"lambda24\", init = -0.03, desc = \"\") |>   add_variable(\"lambda30\", init = .3997, desc = \"\") |>   add_variable(\"lambda32\", init = -1, desc = \"\") |>   add_variable(\"lambda33\", init = 1.1, desc = \"\") |>   add_variable(\"lambda34\", init = -0.03, desc = \"\") |>   add_variable(\"chi\", init = 0.1, desc = \"\") # Add equations model_lp <- model_lp |>   add_equation(\"Y=C + G\", desc = \"\") |>   add_equation(\"YDr= Y - TX + rb[-1] * Bh[-1] + BLh[-1]\") |>   add_equation(\"TX =theta * (Y + rb[-1] * Bh[-1] + BLh[-1])\") |>   add_equation(\"V = V[-1] + (YDr - C) + CG\") |>   add_equation(\"CG = (pbl - pbl[-1]) * BLh[-1]\") |>   add_equation(\"C = alpha1 * YDEr + alpha2 * V[-1]\") |>   add_equation(\"VE = V[-1] + (YDEr - C) + CG\") |>   add_equation(\"Hh = V - Bh - pbl * BLh\") |>   add_equation(\"Hd = VE - Bd - pbl * BLd\") |>   add_equation(\"Bd = (VE * lambda20) + VE * (lambda22 * rb + lambda23 * ERrbl) + lambda24 * (YDEr)\") |>   add_equation(\"BLd = VE * (lambda30 + lambda32 * rb + lambda33 * ERrbl + lambda34 * (YDEr/VE))/pbl\") |>   add_equation(\"BLh = BLd\", desc = \"\", hidden = F) |>   add_equation(\"Bs = Bs[-1] + (G + rb[-1] * Bs[-1] + BLs[-1]) - (TX + rb[-1] * Bcb[-1])                - ((BLs - BLs[-1]) * pbl)\", desc = \"\", hidden = F) |>   add_equation(\"Hs = Hs[-1] + (Bcb - Bcb[-1])\", desc = \"\", hidden = F) |>   add_equation(\"Bcb = Bs - Bh\", desc = \"\", hidden = F) |>   add_equation(\"BLs = BLh\", desc = \"\", hidden = F) |>   add_equation(\"ERrbl = rbl + chi * ((pebl - pbl)/pbl)\", desc = \"\", hidden = F) |>   add_equation(\"rbl = 1/pbl\", desc = \"\", hidden = F) |>   add_equation(\"CGE = chi * (pebl - pbl) * BLh\", desc = \"\", hidden = F) |>   add_equation(\"YDEr = YDr[-1]\", desc = \"\", hidden = F) |>   add_equation(\"Bh = Bd\", desc = \"\") |>   add_equation(\"pebl = pbl\", desc = \"\") |>   add_equation(\"Hs = Hh\", desc = \"Money equilibrium\", hidden = TRUE) # Simulate model model_lp <- simulate_scenario(model_lp,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-05, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_lp, scenario = c(\"baseline\"), from = 1, to = 50,   expressions = c(\"Y\", \"V\") )"},{"path":"https://gamrot.github.io/godley/articles/04_Model_LP.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model LP","text":"details LP model, refer Chapter 5 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/05_Model_REG.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model REG","text":"Start creating empty SFC model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, calculate baseline scenario 100 periods using Gauss method) simulation estimated, visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_reg <- create_model(name = \"SFC REG\") #> Empty model created # Add variables model_reg <- model_reg |>   add_variable(\"r\", init = 0.025) |>   add_variable(\"G_S\", init = 20) |>   add_variable(\"G_N\", init = 20) |>   add_variable(\"mu_N\", init = 0.15) |>   add_variable(\"mu_S\", init = 0.15) |>   add_variable(\"alpha1_N\", init = 0.7) |>   add_variable(\"alpha1_S\", init = 0.7) |>   add_variable(\"alpha2_N\", init = 0.3) |>   add_variable(\"alpha2_S\", init = 0.3) |>   add_variable(\"lambda0_N\", init = 0.67) |>   add_variable(\"lambda0_S\", init = 0.67) |>   add_variable(\"lambda1_N\", init = 0.05) |>   add_variable(\"lambda1_S\", init = 0.05) |>   add_variable(\"lambda2_N\", init = 0.01) |>   add_variable(\"lambda2_S\", init = 0.01) |>   add_variable(\"theta\", init = 0.2) |>   add_variable(\"Y_N\") |>   add_variable(\"C_N\") |>   add_variable(\"X_N\") |>   add_variable(\"IM_N\") |>   add_variable(\"Y_S\") |>   add_variable(\"C_S\") |>   add_variable(\"X_S\") |>   add_variable(\"IM_S\") |>   add_variable(\"YD_N\") |>   add_variable(\"TX_N\") |>   add_variable(\"Bh_N\") |>   add_variable(\"YD_S\") |>   add_variable(\"TX_S\") |>   add_variable(\"Bh_S\") |>   add_variable(\"V_N\") |>   add_variable(\"V_S\") |>   add_variable(\"Hh_N\") |>   add_variable(\"Hh_S\") |>   add_variable(\"TX\") |>   add_variable(\"G\") |>   add_variable(\"Bh\") |>   add_variable(\"Bs\") |>   add_variable(\"Hh\") |>   add_variable(\"Hs\") |>   add_variable(\"Bcb\") # Add equations model_reg <- model_reg |>   add_equation(\"Y_N = C_N + G_N + X_N - IM_N\") |>   add_equation(\"Y_S = C_S + G_S + X_S - IM_S\") |>   add_equation(\"IM_N = mu_N * Y_N\") |>   add_equation(\"IM_S = mu_S * Y_S\") |>   add_equation(\"X_N = IM_S\") |>   add_equation(\"YD_N = Y_N - TX_N + r[-1] * Bh_N[-1]\") |>   add_equation(\"YD_S = Y_S - TX_S + r[-1] * Bh_S[-1]\") |>   add_equation(\"TX_N = theta * ( Y_N + r[-1] * Bh_N[-1])\") |>   add_equation(\"X_S = IM_N\") |>   add_equation(\"TX_S = theta * ( Y_S + r[-1] * Bh_S[-1])\") |>   add_equation(\"V_N = V_N[-1] + ( YD_N - C_N )\") |>   add_equation(\"V_S = V_S[-1] + ( YD_S - C_S )\") |>   add_equation(\"C_N = alpha1_N * YD_N + alpha2_N * V_N[-1]\") |>   add_equation(\"C_S = alpha1_S * YD_S + alpha2_S * V_S[-1]\") |>   add_equation(\"Hh_N = V_N - Bh_N\") |>   add_equation(\"Hh_S = V_S - Bh_S\") |>   add_equation(\"Bh_N = V_N * ( lambda0_N + lambda1_N * r - lambda2_N * ( YD_N/V_N ) )\") |>   add_equation(\"Bh_S = V_S * ( lambda0_S + lambda1_S * r - lambda2_S * ( YD_S/V_S ) )\") |>   add_equation(\"TX = TX_N + TX_S\") |>   add_equation(\"G = G_N + G_S\") |>   add_equation(\"Bh = Bh_N + Bh_S\") |>   add_equation(\"Hh = Hh_N + Hh_S\") |>   add_equation(\"Bs = Bs[-1] + ( G + r[-1] * Bs[-1] ) - ( TX + r[-1] * Bcb[-1] )\") |>   add_equation(\"Hs = Hs[-1] + Bcb - Bcb[-1]\") |>   add_equation(\"Bcb = Bs - Bh\") |>   add_equation(\"Hs = Hh\", desc = \"Money equilibrium\", hidden = TRUE) # Simulate model model_reg <- simulate_scenario(model_reg,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_reg, scenario = \"baseline\", from = 1, to = 50,   expressions = c(     \"deltaV_S = V_S - dplyr::lag(V_S)\",     \"GB_S = TX_S - (G_S + dplyr::lag(r) * dplyr::lag(Bh_S))\",     \"TB_S = X_S - IM_S\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/05_Model_REG.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model REG","text":"godley package can simulate shocks affect economy (specifically, impact base scenario).","code":""},{"path":"https://gamrot.github.io/godley/articles/05_Model_REG.html","id":"shock-1","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 1","title":"Model REG","text":"first example, propose introduce increase propensity import South. First, initialize empty shock object: , define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Finally, plot simulation outcomes:","code":"# Create empty shock shock_reg <- create_shock() #> Shock object created # Add shock equation with increased propensity to import of the South shock_reg <- add_shock(shock_reg,   variable = \"mu_S\",   value = 0.25,   desc = \"An increase in the propensity to import of the South\",   start = 5, end = 60 ) # Create new scenario with this shock model_reg <- add_scenario(model_reg,   name = \"expansion1\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_reg ) # Simulate shock model_reg <- simulate_scenario(model_reg,   scenario = \"expansion1\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion1 (1 of 1) #> Scenario(s) successfully simulated plot_simulation(   model = model_reg, scenario = \"expansion1\", from = 1, to = 50,   expressions = c(     \"deltaV_S = V_S - dplyr::lag(V_S)\",     \"GB_S = TX_S - (G_S + dplyr::lag(r) * dplyr::lag(Bh_S))\",     \"TB_S = X_S - IM_S\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/05_Model_REG.html","id":"shock-2","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 2","title":"Model REG","text":"Another example implements increase government expenditures South. First, initialize empty shock object: Add appropriate equation: Integrate shock model creating new scenario: Simulate model shock applied: Visualize results shock scenario:","code":"# Create empty shock shock_reg <- create_shock() #> Shock object created # Add shock equation with increased government expenditures of the South shock_reg <- add_shock(shock_reg,   variable = \"G_S\",   value = 25,   desc = \"An increase of government expenditures of the South\",   start = 5, end = 50 ) # Create new scenario with this shock model_reg <- add_scenario(model_reg,   name = \"expansion2\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_reg ) # Simulate shock model_reg <- simulate_scenario(model_reg,   scenario = \"expansion2\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion2 (1 of 1) #> Scenario(s) successfully simulated plot_simulation(   model = model_reg, scenario = \"expansion2\", from = 1, to = 50,   expressions = c(     \"deltaV_S = V_S - dplyr::lag(V_S)\",     \"GB_S = TX_S - (G_S + dplyr::lag(r) * dplyr::lag(Bh_S))\",     \"TB_S = X_S - IM_S\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/05_Model_REG.html","id":"shock-3","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 3","title":"Model REG","text":"final example, suggest applying increase propensity save among Southern households. First, initialize empty shock: Add appropriate equation: Integrate shock model creating new scenario: Run simulation shock applied: Finally, plot simulation outcomes:","code":"# Create empty shock shock_reg <- create_shock() #> Shock object created # Add shock equation with increased government expenditures of the South shock_reg <- add_shock(shock_reg,   variable = \"alpha1_S\",   value = .6,   desc = \"Increased propensity to save of the Southern households\",   start = 5, end = 50 ) # Create new scenario with this shock model_reg <- add_scenario(model_reg,   name = \"expansion3\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_reg ) # Simulate shock model_reg <- simulate_scenario(model_reg,   scenario = \"expansion3\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion3 (1 of 1) #> Scenario(s) successfully simulated plot_simulation(   model = model_reg, scenario = \"expansion3\", from = 1, to = 50,   expressions = c(     \"deltaV_S = V_S - dplyr::lag(V_S)\",     \"GB_S = TX_S - (G_S + dplyr::lag(r) * dplyr::lag(Bh_S))\",     \"TB_S = X_S - IM_S\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/05_Model_REG.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model REG","text":"details REG model, refer Chapter 6 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/06_Model_OPEN.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model OPEN","text":"Start creating empty SFC model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, calculate baseline scenario 100 periods using Gauss method) simulation estimated, can visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_open <- create_model(name = \"SFC OPEN\") #> Empty model created # Add variables model_open <- model_open |>   add_variable(\"xr\", init = 1) |>   add_variable(\"pg_N\", init = 1) |>   add_variable(\"r_N\", init = 0.025) |>   add_variable(\"r_S\", init = 0.025) |>   add_variable(\"G_S\", init = 20) |>   add_variable(\"G_N\", init = 20) |>   add_variable(\"mu_N\", init = 0.15) |>   add_variable(\"mu_S\", init = 0.15) |>   add_variable(\"alpha1_N\", init = 0.7) |>   add_variable(\"alpha1_S\", init = 0.8) |>   add_variable(\"alpha2_N\", init = 0.3) |>   add_variable(\"alpha2_S\", init = 0.2) |>   add_variable(\"lambda0_N\", init = 0.67) |>   add_variable(\"lambda0_S\", init = 0.67) |>   add_variable(\"lambda1_N\", init = 0.05) |>   add_variable(\"lambda1_S\", init = 0.05) |>   add_variable(\"lambda2_N\", init = 0.01) |>   add_variable(\"lambda2_S\", init = 0.01) |>   add_variable(\"theta_N\", init = 0.2) |>   add_variable(\"theta_S\", init = 0.2) |>   add_variable(\"Y_N\") |>   add_variable(\"Y_S\") |>   add_variable(\"C_N\") |>   add_variable(\"X_N\") |>   add_variable(\"IM_N\") |>   add_variable(\"C_S\") |>   add_variable(\"X_S\") |>   add_variable(\"IM_S\") |>   add_variable(\"YD_N\") |>   add_variable(\"YD_S\") |>   add_variable(\"TX_S\") |>   add_variable(\"TX_N\") |>   add_variable(\"Bh_S\") |>   add_variable(\"Bh_N\") |>   add_variable(\"V_N\") |>   add_variable(\"V_S\") |>   add_variable(\"Hh_N\") |>   add_variable(\"Hh_S\") |>   add_variable(\"Bs_N\") |>   add_variable(\"Bs_S\") |>   add_variable(\"Bcb_N\") |>   add_variable(\"Bcb_S\") |>   add_variable(\"or_N\") |>   add_variable(\"or_S\") |>   add_variable(\"Hs_N\") |>   add_variable(\"Hs_S\") |>   add_variable(\"pg_S\") |>   add_variable(\"deltaor_S\") |>   add_variable(\"deltaor_N\") # Add equations model_open <- model_open |>   add_equation(\"Y_N = C_N + G_N + X_N - IM_N\") |>   add_equation(\"Y_S = C_S + G_S + X_S - IM_S\") |>   add_equation(\"IM_N = mu_N * Y_N\") |>   add_equation(\"IM_S = mu_S * Y_S\") |>   add_equation(\"X_N = IM_S / xr\") |>   add_equation(\"X_S = IM_N * xr\") |>   add_equation(\"YD_N = Y_N - TX_N + r_N[-1] * Bh_N[-1]\") |>   add_equation(\"YD_S = Y_S - TX_S + r_S[-1] * Bh_S[-1]\") |>   add_equation(\"TX_N = theta_N * ( Y_N + r_N[-1] * Bh_N[-1])\") |>   add_equation(\"TX_S = theta_S * ( Y_S + r_S[-1] * Bh_S[-1])\") |>   add_equation(\"V_N = V_N[-1] + ( YD_N - C_N )\") |>   add_equation(\"V_S = V_S[-1] + ( YD_S - C_S )\") |>   add_equation(\"C_N = alpha1_N * YD_N + alpha2_N * V_N[-1]\") |>   add_equation(\"C_S = alpha1_S * YD_S + alpha2_S * V_S[-1]\") |>   add_equation(\"Hh_N = V_N - Bh_N\") |>   add_equation(\"Hh_S = V_S - Bh_S\") |>   add_equation(\"Bh_N = V_N * ( lambda0_N + lambda1_N * r_N - lambda2_N * ( YD_N/V_N ) )\") |>   add_equation(\"Bh_S = V_S * ( lambda0_S + lambda1_S * r_S - lambda2_S * ( YD_S/V_S ) )\") |>   add_equation(\"Bs_N = Bs_N[-1] + ( G_N + r_N[-1] * Bs_N[-1] ) - ( TX_N + r_N[-1] * Bcb_N[-1] )\") |>   add_equation(\"Bs_S = Bs_S[-1] + ( G_S + r_S[-1] * Bs_S[-1] ) - ( TX_S + r_S[-1] * Bcb_S[-1] )\") |>   add_equation(\"Bcb_N = Bs_N - Bh_N\") |>   add_equation(\"Bcb_S = Bs_S - Bh_S\") |>   add_equation(\"or_N = or_N[-1] + (( Hs_N - Hs_N[-1] - ( Bcb_N - Bcb_N[-1] ) )/pg_N)\") |>   add_equation(\"or_S = or_S[-1] + (( Hs_S - Hs_S[-1] - ( Bcb_S - Bcb_S[-1] ) )/pg_S)\") |>   add_equation(\"Hs_N = Hh_N\") |>   add_equation(\"Hs_S = Hh_S\") |>   add_equation(\"pg_S = pg_N * xr\") |>   add_equation(\"deltaor_S = or_S - or_S[-1]\") |>   add_equation(\"deltaor_N = - (or_N - or_N[-1])\") |>   add_equation(\"deltaor_S = deltaor_N\", hidden = TRUE) # Simulate model model_open <- simulate_scenario(model_open,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated plot_simulation(   model = model_open, scenario = \"baseline\", from = 1, to = 50,   expressions = c(     \"TB_N = X_N - IM_N\",     \"TB_S = X_S - IM_S\",     \"GB_N = TX_N - (G_N + dplyr::lag(r_N) * dplyr::lag(Bh_N))\",     \"GB_S = TX_S - (G_S + dplyr::lag(r_S) * dplyr::lag(Bh_S))\"   ) ) plot_simulation(   model = model_open, scenario = \"baseline\", from = 1, to = 50,   expressions = c(\"Y_N\", \"Y_S\") ) plot_simulation(   model = model_open, scenario = \"baseline\", from = 1, to = 50,   expressions = c(\"or_S\", \"or_N\") )"},{"path":"https://gamrot.github.io/godley/articles/06_Model_OPEN.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model OPEN","text":"godley package can simulate shocks affect economy (specifically, impact base scenario). example demonstrate effect ever-falling gold reserves. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Finally, display results shock scenario:","code":"# Create empty shock shock_open <- create_shock() #> Shock object created # Add shock equation shock_open <- add_shock(shock_open,   variable = \"mu_S\",   value = 0.25,   desc = \"increase in the propensity to import in the South\",   start = 5, end = 50 ) # Create new scenario with this shock model_open <- add_scenario(model_open,   name = \"expansion\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_open ) # Simulate shock model_open <- simulate_scenario(model_open,   scenario = \"expansion\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated plot_simulation(   model = model_open, scenario = \"expansion\", from = 1, to = 50,   expressions = c(     \"TB_N = X_N - IM_N\",     \"TB_S = X_S - IM_S\",     \"GB_N = TX_N - (G_N + dplyr::lag(r_N) * dplyr::lag(Bh_N))\",     \"GB_S = TX_S - (G_S + dplyr::lag(r_S) * dplyr::lag(Bh_S))\"   ) ) plot_simulation(   model = model_open, scenario = \"expansion\", from = 1, to = 50,   expressions = c(\"Y_N\", \"Y_S\") ) plot_simulation(   model = model_open, scenario = \"expansion\", from = 1, to = 50,   expressions = c(\"or_S\", \"or_N\") )"},{"path":"https://gamrot.github.io/godley/articles/06_Model_OPEN.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model OPEN","text":"details OPEN model, refer Chapter 6 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/07_Model_BMW.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model BMW","text":"Start creating empty SFC model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, baseline scenario 100 periods using Gauss method): simulation estimated, can create plot visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_bmw <- create_model(name = \"SFC BMW\") #> Empty model created # Add variables model_bmw <- model_bmw |>   add_variable(\"rl\", init = 0.025) |>   add_variable(\"alpha0\", init = 20) |>   add_variable(\"alpha1\", init = 0.75) |>   add_variable(\"alpha2\", init = 0.10) |>   add_variable(\"delta\", init = 0.10) |>   add_variable(\"gamma\", init = 0.15) |>   add_variable(\"kappa\", init = 1) |>   add_variable(\"pr\", init = 1) |>   add_variable(\"Nd\", init = .001) |>   add_variable(\"Ns\", init = .001) |>   add_variable(\"Y\", init = .001) |>   add_variable(\"Cs\") |>   add_variable(\"Cd\") |>   add_variable(\"Is\") |>   add_variable(\"Id\") |>   add_variable(\"Ls\") |>   add_variable(\"Ld\") |>   add_variable(\"WBd\") |>   add_variable(\"AF\") |>   add_variable(\"K\") |>   add_variable(\"YD\") |>   add_variable(\"WBs\") |>   add_variable(\"rm\") |>   add_variable(\"Mh\") |>   add_variable(\"Ms\") |>   add_variable(\"W\") |>   add_variable(\"DA\") |>   add_variable(\"KT\") # Add equations model_bmw <- model_bmw |>   add_equation(\"Cs = Cd\") |>   add_equation(\"Is = Id\") |>   add_equation(\"Ns = Nd\") |>   add_equation(\"Ls = Ls[-1] + Ld - Ld[-1]\") |>   add_equation(\"Y = Cs + Is\") |>   add_equation(\"WBd = Y - rl[-1] * Ld[-1] - AF\") |>   add_equation(\"AF = delta * K[-1]\") |>   add_equation(\"Ld = Ld[-1] + Id - AF\") |>   add_equation(\"YD = WBs + rm[-1] * Mh[-1]\") |>   add_equation(\"Mh = Mh[-1] + YD - Cd\") |>   add_equation(\"Ms = Ms[-1] + Ls - Ls[-1]\") |>   add_equation(\"rm = rl\") |>   add_equation(\"WBs = W * Ns\") |>   add_equation(\"Nd = Y / pr\") |>   add_equation(\"W = WBd / Nd\") |>   add_equation(\"Cd = alpha0 + alpha1 * YD + alpha2 * Mh[-1]\") |>   add_equation(\"K = K[-1] + Id - DA\") |>   add_equation(\"DA = delta * K[-1]\") |>   add_equation(\"KT = kappa * Y[-1]\") |>   add_equation(\"Id = gamma * (KT - K[-1]) + DA\") |>   add_equation(\"Ms = Mh\", hidden = TRUE) # Simulate model model_bmw <- simulate_scenario(model_bmw,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_bmw, scenario = c(\"baseline\"), from = 1, to = 50,   expressions = c(\"Cd\", \"YD\") )"},{"path":"https://gamrot.github.io/godley/articles/07_Model_BMW.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model BMW","text":"godley package can simulate shocks affect economy (specifically, impact base scenario).","code":""},{"path":"https://gamrot.github.io/godley/articles/07_Model_BMW.html","id":"shock-1","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 1","title":"Model BMW","text":"example observe effect increased autonomous consumption expenditures. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Finally, display results shock scenario:","code":"# Create empty shock shock_bmw <- create_shock() #> Shock object created # Add shock equation with increase in autonomous consumption expenditures shock_bmw <- add_shock(shock_bmw,   variable = \"alpha0\",   value = 30,   desc = \"Increase in autonomous consumption expenditures\",   start = 5, end = 50 ) # Create new scenario with this shock model_bmw <- add_scenario(model_bmw,   name = \"expansion1\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_bmw ) # Simulate shock model_bmw <- simulate_scenario(model_bmw,   scenario = \"expansion1\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Simulating scenario expansion1 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_bmw, scenario = c(\"expansion1\"), from = 1, to = 50,   expressions = c(\"Cd\", \"YD\") )"},{"path":"https://gamrot.github.io/godley/articles/07_Model_BMW.html","id":"shock-2","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 2","title":"Model BMW","text":"second example, propose introduce increase propensity save. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Display results plot:","code":"# Create empty shock shock_bmw <- create_shock() #> Shock object created # Add shock equation with increased propensity to save shock_bmw <- add_shock(shock_bmw,   variable = \"alpha1\",   value = 0.7,   desc = \"Increase in the propensity to save\",   start = 5, end = 50 ) # Create new scenario with this shock model_bmw <- add_scenario(model_bmw,   name = \"expansion2\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_bmw ) # Simulate shock model_bmw <- simulate_scenario(model_bmw,   scenario = \"expansion2\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Simulating scenario expansion2 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_bmw, scenario = c(\"expansion2\"), from = 1, to = 50,   expressions = c(\"Cd\", \"YD\") )"},{"path":"https://gamrot.github.io/godley/articles/07_Model_BMW.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model BMW","text":"details BMW model, refer Chapter 7 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/08_Model_BMWK.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model BMWK","text":"Start creating empty SFC model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, baseline scenario 100 periods using Gauss method): simulation estimated, can create plot visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_bmwk <- create_model(name = \"SFC BMWK\") #> Empty model created # Add variables model_bmwk <- model_bmwk |>   add_variable(\"rl\", init = 0.025) |>   add_variable(\"alpha0\", init = 20) |>   add_variable(\"alpha2\", init = 0.10) |>   add_variable(\"delta\", init = 0.10) |>   add_variable(\"gamma\", init = 0.15) |>   add_variable(\"kappa\", init = 1) |>   add_variable(\"pr\", init = 1) |>   add_variable(\"Nd\", init = .001) |>   add_variable(\"Ns\", init = .001) |>   add_variable(\"Y\", init = .001) |>   add_variable(\"alpha1w\", init = .8) |>   add_variable(\"alpha1r\", init = .15) |>   add_variable(\"Cs\") |>   add_variable(\"Cd\") |>   add_variable(\"Is\") |>   add_variable(\"Id\") |>   add_variable(\"Ls\") |>   add_variable(\"Ld\") |>   add_variable(\"WBd\") |>   add_variable(\"AF\") |>   add_variable(\"K\") |>   add_variable(\"YD\") |>   add_variable(\"WBs\") |>   add_variable(\"rm\") |>   add_variable(\"Mh\") |>   add_variable(\"Ms\") |>   add_variable(\"W\") |>   add_variable(\"DA\") |>   add_variable(\"KT\") # Add equations model_bmwk <- model_bmwk |>   add_equation(\"Cs = Cd\") |>   add_equation(\"Is = Id\") |>   add_equation(\"Ns = Nd\") |>   add_equation(\"Ls = Ls[-1] + Ld - Ld[-1]\") |>   add_equation(\"Y = Cs + Is\") |>   add_equation(\"WBd = Y - rl[-1] * Ld[-1] - AF\") |>   add_equation(\"AF = delta * K[-1]\") |>   add_equation(\"Ld = Ld[-1] + Id - AF\") |>   add_equation(\"YD = WBs + rm[-1] * Mh[-1]\") |>   add_equation(\"Mh = Mh[-1] + YD - Cd\") |>   add_equation(\"Ms = Ms[-1] + Ls - Ls[-1]\") |>   add_equation(\"rm = rl\") |>   add_equation(\"WBs = W * Ns\") |>   add_equation(\"Nd = Y / pr\") |>   add_equation(\"W = WBd / Nd\") |>   add_equation(\"Cd = alpha0 + alpha1w * WBs + alpha1r * rm[-1] * Mh[-1] + alpha2 * Mh\") |>   add_equation(\"K = K[-1] + Id - DA\") |>   add_equation(\"DA = delta * K[-1]\") |>   add_equation(\"KT = kappa * Y[-1]\") |>   add_equation(\"Id = gamma * (KT - K[-1]) + DA\") |>   add_equation(\"Ms = Mh\", hidden = TRUE) # Simulate model model_bmwk <- simulate_scenario(model_bmwk,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_bmwk, scenario = c(\"baseline\"), from = 1, to = 50,   expressions = c(\"Y\") )"},{"path":"https://gamrot.github.io/godley/articles/08_Model_BMWK.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model BMWK","text":"godley package can simulate shocks affect economy (specifically, impact base scenario). example, simulate effect increase interest rate. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Plot simulation outcomes:","code":"# Create empty shock shock_bmwk <- create_shock() #> Shock object created # Add shock equation shock_bmwk <- add_shock(shock_bmwk,   variable = \"rl\",   value = 0.035,   desc = \"Increase in the interest rate\", start = 5, end = 50 ) # Create new scenario with this shock model_bmwk <- add_scenario(model_bmwk,   name = \"expansion\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_bmwk ) # Simulate shock model_bmwk <- simulate_scenario(model_bmwk,   scenario = \"expansion\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_bmwk, scenario = c(\"expansion\"), from = 1, to = 50,   expressions = c(\"Y\") )"},{"path":"https://gamrot.github.io/godley/articles/08_Model_BMWK.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model BMWK","text":"details BMWK model, refer Chapter 7 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/09_Model_DIS.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model DIS","text":"Start creating empty SFC model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, baseline scenario 100 periods using Gauss method): simulation estimated, can create plot visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_dis <- create_model(name = \"SFC DIS\") #> Empty model created # Add variables model_dis <- model_dis |>   add_variable(\"rl\", init = 0.025) |>   add_variable(\"pr\", init = 1) |>   add_variable(\"W\", init = 0.75) |>   add_variable(\"add\", init = 0.02) |>   add_variable(\"alpha0\", init = 15) |>   add_variable(\"alpha1\", init = 0.8) |>   add_variable(\"alpha2\", init = 0.1) |>   add_variable(\"beta\", init = 0.75) |>   add_variable(\"epsilon\", init = 0.75) |>   add_variable(\"gamma\", init = 0.25) |>   add_variable(\"phi\", init = 0.25) |>   add_variable(\"sigma_T\", init = 0.15) |>   add_variable(\"y\", init = .001) |>   add_variable(\"p\", init = .001) |>   add_variable(\"NHUC\", init = .001) |>   add_variable(\"s_E\", init = .001) |>   add_variable(\"inv_T\") |>   add_variable(\"inv_E\") |>   add_variable(\"inv\") |>   add_variable(\"s\") |>   add_variable(\"c\") |>   add_variable(\"N\") |>   add_variable(\"WB\") |>   add_variable(\"UC\") |>   add_variable(\"INV\") |>   add_variable(\"S\") |>   add_variable(\"EF\") |>   add_variable(\"Ld\") |>   add_variable(\"Ls\") |>   add_variable(\"Ms\") |>   add_variable(\"rm\") |>   add_variable(\"EFb\") |>   add_variable(\"Mh\") |>   add_variable(\"YD\") |>   add_variable(\"C\") |>   add_variable(\"ydhs\") |>   add_variable(\"mh\") |>   add_variable(\"ydhs_E\") # Add equations model_dis <- model_dis |>   add_equation(\"y = s_E + inv_E - inv[-1]\") |>   add_equation(\"inv_T = sigma_T * s_E\") |>   add_equation(\"inv_E = inv[-1] + gamma * (inv_T - inv[-1])\") |>   add_equation(\"inv = inv[-1] + (y - s)\") |>   add_equation(\"s_E = beta * s[-1] + (1 - beta) * s_E[-1]\") |>   add_equation(\"s = c\") |>   add_equation(\"N = y / pr\") |>   add_equation(\"WB = N * W\") |>   add_equation(\"UC = WB / y\") |>   add_equation(\"INV = inv * UC\") |>   add_equation(\"S = p * s\") |>   add_equation(\"p = (1 + phi) * NHUC\") |>   add_equation(\"NHUC = (1 - sigma_T) * UC + sigma_T * (1 + rl[-1]) * UC[-1]\") |>   add_equation(\"EF = S - WB + (INV - INV[-1]) - rl[-1] * INV[-1]\") |>   add_equation(\"Ld = INV\") |>   add_equation(\"Ls = Ld\") |>   add_equation(\"Ms = Ls\") |>   add_equation(\"rm = rl - add\") |>   add_equation(\"EFb = rl[-1] * Ls[-1] - rm[-1] * Mh[-1]\") |>   add_equation(\"YD = WB + EF + EFb + rm[-1] * Mh[-1]\") |>   add_equation(\"Mh = Mh[-1] + YD - C\") |>   add_equation(\"ydhs = c + (mh - mh[-1])\") |>   add_equation(\"C = c * p\") |>   add_equation(\"mh = Mh / p\") |>   add_equation(\"c = alpha0 + alpha1 * ydhs_E + alpha2 * mh[-1]\") |>   add_equation(\"ydhs_E = epsilon * ydhs[-1] + (1 - epsilon) * ydhs_E[-1]\") |>   add_equation(\"Mh = Ms\", hidden = TRUE) # Simulate model model_dis <- simulate_scenario(model_dis,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_dis, scenario = c(\"baseline\"), from = 1, to = 40,   expressions = c(\"ydhs\", \"c\") ) # Plot results plot_simulation(   model = model_dis, scenario = c(\"baseline\"), from = 1, to = 40,   expressions = c(     \"delta_inv = inv - dplyr::lag(inv)\",     \"delta_inv_E = inv_E - dplyr::lag(inv_E)\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/09_Model_DIS.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model DIS","text":"godley package can simulate shocks affect economy (specifically, impact base scenario).","code":""},{"path":"https://gamrot.github.io/godley/articles/09_Model_DIS.html","id":"shock-1","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 1","title":"Model DIS","text":"initial example demonstrates effect one-shot increase costing margin. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Display results plot:","code":"# Create empty shock shock_dis <- create_shock() #> Shock object created # Add shock equation shock_dis <- add_shock(shock_dis,   variable = \"phi\",   value = 0.35,   desc = \"One-shot increase in the costing margin\",   start = 5, end = 40 ) # Create new scenario with this shock model_dis <- add_scenario(model_dis,   name = \"expansion1\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_dis ) # Simulate shock model_dis <- simulate_scenario(model_dis,   scenario = \"expansion1\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion1 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_dis, scenario = c(\"expansion1\"), from = 1, to = 40,   expressions = c(\"c\", \"ydhs\") ) # Plot results plot_simulation(   model = model_dis, scenario = c(\"expansion1\"), from = 1, to = 40,   expressions = c(     \"delta_inv = inv - dplyr::lag(inv)\",     \"delta_inv_E = inv_E - dplyr::lag(inv_E)\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/09_Model_DIS.html","id":"shock-2","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 2","title":"Model DIS","text":"Another example conveys impact increase target inventory--sales ratio. First, initialize empty shock object: Add appropriate equation: Integrate shock model creating new scenario: Simulate model shock applied: Plot results:","code":"# Create empty shock shock_dis <- create_shock() #> Shock object created # Add shock equation shock_dis <- add_shock(shock_dis,   variable = \"sigma_T\",   value = 0.25,   desc = \"Increase in the target inventories to sales ratio\",   start = 5, end = 50 ) # Create new scenario with this shock model_dis <- add_scenario(model_dis,   name = \"expansion2\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_dis ) # Simulate shock model_dis <- simulate_scenario(model_dis,   scenario = \"expansion2\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion2 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_dis, scenario = c(\"expansion2\"), from = 1, to = 40,   expressions = c(\"c\", \"ydhs\") ) # Plot results plot_simulation(   model = model_dis, scenario = c(\"expansion2\"), from = 1, to = 40,   expressions = c(     \"delta_inv = inv - dplyr::lag(inv)\",     \"delta_inv_E = inv_E - dplyr::lag(inv_E)\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/09_Model_DIS.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model DIS","text":"details DIS model, refer Chapter 9 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/10_Model_DISINF.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model DISINF","text":"Start creating empty SFC model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, baseline scenario 100 periods using Gauss method): simulation estimated, can create plot visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_disinf <- create_model(name = \"SFC DISINF\") #> Empty model created # Add variables model_disinf <- model_disinf |>   add_variable(\"rrc\", init = 0.025) |>   add_variable(\"pr\", init = 1) |>   add_variable(\"add\", init = 0.02) |>   add_variable(\"alpha0\", init = 15) |>   add_variable(\"alpha1\", init = 0.8) |>   add_variable(\"alpha2\", init = 0.1) |>   add_variable(\"beta\", init = 0.9) |>   add_variable(\"epsilon\", init = 0.8) |>   add_variable(\"gamma\", init = 0.25) |>   add_variable(\"phi\", init = 0.24) |>   add_variable(\"sigma_T\", init = 0.2) |>   add_variable(\"Omega0\", init = -1.4) |>   add_variable(\"Omega1\", init = 1) |>   add_variable(\"Omega2\", init = 1.2) |>   add_variable(\"Omega3\", init = 0.3) |>   add_variable(\"p\", init = 1) |>   add_variable(\"W\", init = 1) |>   add_variable(\"UC\", init = 1) |>   add_variable(\"s_E\", init = .00001) |>   add_variable(\"inv_T\") |>   add_variable(\"inv_E\") |>   add_variable(\"inv\") |>   add_variable(\"s\") |>   add_variable(\"c\") |>   add_variable(\"N\") |>   add_variable(\"WB\") |>   add_variable(\"INV\") |>   add_variable(\"S\") |>   add_variable(\"EF\") |>   add_variable(\"Ld\") |>   add_variable(\"Ls\") |>   add_variable(\"Ms\") |>   add_variable(\"rm\") |>   add_variable(\"EFb\") |>   add_variable(\"Mh\") |>   add_variable(\"YD\") |>   add_variable(\"C\") |>   add_variable(\"omega_T\") |>   add_variable(\"Nfe\") |>   add_variable(\"yfe\") |>   add_variable(\"mh\") |>   add_variable(\"y\") |>   add_variable(\"rl\") |>   add_variable(\"pic\") |>   add_variable(\"ydhs\") |>   add_variable(\"yd\") |>   add_variable(\"ydhs_E\") # Add equations model_disinf <- model_disinf |>   add_equation(\"y = s_E + inv_E - inv[-1]\") |>   add_equation(\"inv_T = sigma_T * s_E\") |>   add_equation(\"inv_E = inv[-1] + gamma * (inv_T - inv[-1])\") |>   add_equation(\"inv = inv[-1] + (y - s)\") |>   add_equation(\"s_E = beta * s[-1] + (1 - beta) * s_E[-1]\") |>   add_equation(\"s = c\") |>   add_equation(\"N = y / pr\") |>   add_equation(\"WB = N * W\") |>   add_equation(\"UC = WB / y\") |>   add_equation(\"INV = inv * UC\") |>   add_equation(\"S = p * s\") |>   add_equation(\"p = (1 + phi) * (1 + rrc * sigma_T) * UC\") |>   add_equation(\"EF = S - WB + (INV - INV[-1]) - rl * INV[-1]\") |>   add_equation(\"Ld = INV\") |>   add_equation(\"Ls = Ld\") |>   add_equation(\"Ms = Ls\") |>   add_equation(\"rm = rl - add\") |>   add_equation(\"EFb = rl[-1] * Ls[-1] - rm[-1] * Mh[-1]\") |>   add_equation(\"pic = (UC / UC[-1]) - 1\") |>   add_equation(\"rl = (1 + rrc) * (1 + pic) - 1\") |>   add_equation(\"YD = WB + EF + EFb + rm * Mh[-1]\") |>   add_equation(\"Mh = Mh[-1] + YD - C\") |>   add_equation(\"ydhs = c + (mh - mh[-1])\") |>   add_equation(\"yd = YD / p\") |>   add_equation(\"C = c * p\") |>   add_equation(\"mh = Mh / p\") |>   add_equation(\"c = alpha0 + alpha1 * ydhs_E + alpha2 * mh[-1]\") |>   add_equation(\"ydhs_E = epsilon * ydhs[-1] + (1 - epsilon) * ydhs_E[-1]\") |>   add_equation(\"omega_T = Omega0 + Omega1 * pr + Omega2 * (N / Nfe)\") |>   add_equation(\"W = W[-1] * (1 + Omega3 * (omega_T[-1] - (W[-1]/p[-1])))\") |>   add_equation(\"yfe = (1 + sigma_T) * s - inv[-1]\") |>   add_equation(\"Nfe = s / pr\") # Simulate model model_disinf <- simulate_scenario(model_disinf,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_disinf, scenario = c(\"baseline\"),   from = 1, to = 40,   expressions = c(\"p\", \"UC\", \"UCp = UC/p\") ) # Plot results plot_simulation(   model = model_disinf, scenario = c(\"baseline\"),   from = 1, to = 40,   expressions = c(\"inflation = (p - dplyr::lag(p)) / dplyr::lag(p)\") ) # Plot results plot_simulation(   model = model_disinf, scenario = c(\"baseline\"),   from = 1, to = 40,   expressions = c(     \"ydhs_ss = alpha0 / (1 - alpha1 - alpha2*sigma_T * (UC/p))\",     \"ydhs\", \"c\", \"s\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/10_Model_DISINF.html","id":"shock-scenarios","dir":"Articles","previous_headings":"","what":"Shock scenarios","title":"Model DISINF","text":"godley package can simulate shocks affect base scenario.","code":""},{"path":"https://gamrot.github.io/godley/articles/10_Model_DISINF.html","id":"shock-1","dir":"Articles","previous_headings":"Shock scenarios","what":"Shock 1","title":"Model DISINF","text":"first example demonstrates effect increase costing margins. First, initialize empty shock object: , define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Finally, plot simulation results:","code":"# Create empty shock shock_disinf <- create_shock() #> Shock object created # Add shock equation shock_disinf <- add_shock(shock_disinf,   variable = \"phi\",   value = 0.3,   desc = \"Increase in the costing margins\",   start = 5, end = 50 ) # Create new scenario with this shock model_disinf <- add_scenario(model_disinf,   name = \"expansion1\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_disinf ) # Simulate shock model_disinf <- simulate_scenario(model_disinf,   scenario = \"expansion1\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion1 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_disinf, scenario = c(\"expansion1\"), from = 1, to = 40,   expressions = c(\"p\", \"UC\", \"UCp = UC/p\") ) # Plot results plot_simulation(   model = model_disinf, scenario = c(\"expansion1\"), from = 1, to = 40,   expressions = c(\"inflation = (p - dplyr::lag(p)) / dplyr::lag(p)\") ) # Plot results plot_simulation(   model = model_disinf, scenario = c(\"expansion1\"), from = 1, to = 40,   expressions = c(     \"ydhs_ss = alpha0 / (1 - alpha1 - alpha2*sigma_T * (UC/p))\",     \"ydhs\", \"c\", \"s\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/10_Model_DISINF.html","id":"shock-2","dir":"Articles","previous_headings":"Shock scenarios","what":"Shock 2","title":"Model DISINF","text":"example applies increase target real wage. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Finally, plot simulation outcomes:","code":"# Create empty shock shock_disinf <- create_shock() #> Shock object created # Add shock equation shock_disinf <- add_shock(shock_disinf,   variable = \"Omega0\",   value = -1,   desc = \"Increase in the target real wage\",   start = 5, end = 100 ) # Create new scenario with this shock model_disinf <- add_scenario(model_disinf,   name = \"expansion2\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_disinf ) # Simulate shock model_disinf <- simulate_scenario(model_disinf,   scenario = \"expansion2\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion2 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_disinf, scenario = c(\"expansion2\"), from = 1, to = 40,   expressions = c(\"p\", \"UC\", \"UCp = UC/p\") ) # Plot results plot_simulation(   model = model_disinf, scenario = c(\"expansion2\"), from = 1, to = 40,   expressions = c(\"inflation = (p - dplyr::lag(p)) / dplyr::lag(p)\") ) # Plot results plot_simulation(   model = model_disinf, scenario = c(\"expansion2\"), from = 1, to = 40,   expressions = c(     \"ydhs_ss = alpha0 / (1 - alpha1 - alpha2*sigma_T * (UC/p))\",     \"ydhs\", \"c\", \"s\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/10_Model_DISINF.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model DISINF","text":"details DISINF model, refer Chapter 9 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/11_Model_PCEX.html","id":"model-pcex---random-shocks","dir":"Articles","previous_headings":"","what":"Model PCEX - random shocks","title":"Model PCEX","text":"example, expectations follow random process, modeled equation new variable “Ra,” normally distributed mean 0:Yd_e = Yd * (1 + Ra). create model, first initialize empty SFC model: , add variables model: Define relationships variables adding equations: Now, can simulate model (example, baseline scenario 100 periods using Newton method): simulation estimated, can create plot visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_pcex <- create_model(name = \"SFC PCEX\") #> Empty model created # Add variables model_pcex <- model_pcex |>   add_variable(\"B_cb\", desc = \"\") |>   add_variable(\"H_s\", desc = \"\") |>   add_variable(\"B_s\", desc = \"\") |>   add_variable(\"B_h\", desc = \"\") |>   add_variable(\"H_d1\", desc = \"\") |>   add_variable(\"H_d\", desc = \"\") |>   add_variable(\"H_h\", desc = \"\") |>   add_variable(\"C\", desc = \"\") |>   add_variable(\"V\", desc = \"\") |>   add_variable(\"T_x\", desc = \"\") |>   add_variable(\"Y\", desc = \"Income = GDP\") |>   add_variable(\"Yd\", desc = \"Disposable income of households\") |>   add_variable(\"Yd_e\") |>   add_variable(\"B_d\") |>   add_variable(\"V_e\") |>   add_variable(\"Ra\") |>   add_variable(\"alpha1\", init = 0.6, desc = \"Propensity to consume out of income\") |>   add_variable(\"alpha2\", init = 0.4, desc = \"Propensity to consume out of wealth\") |>   add_variable(\"theta\", init = 0.2, desc = \"Tax rate\") |>   add_variable(\"r\", init = 0.025, desc = \"\") |>   add_variable(\"G\", init = 20, desc = \"Government demand\") |>   add_variable(\"lambda0\", init = 0.635, desc = \"\") |>   add_variable(\"lambda1\", init = 0.05, desc = \"\") |>   add_variable(\"lambda2\", init = 0.01, desc = \"\") # Add equations model_pcex <- model_pcex |>   add_equation(\"Y = C + G\", desc = \"\") |>   add_equation(\"Yd = Y - T_x + r[-1] * B_h[-1]\") |>   add_equation(\"T_x = theta * (Y + r[-1] * B_h[-1])\") |>   add_equation(\"V = V[-1] + (Yd - C)\") |>   add_equation(\"C = alpha1 * Yd_e + alpha2 * V[-1]\") |>   add_equation(\"B_d =  V_e * lambda0 + V_e * lambda1 * r - lambda2 * Yd_e\") |>   add_equation(\"H_d1 = V_e * (1 - lambda0) - V_e * lambda1 * r + lambda2 * Yd_e\") |>   add_equation(\"H_d = V_e - B_d\") |>   add_equation(\"V_e = V[-1] + (Yd_e - C)\") |>   add_equation(\"H_h = V - B_h\") |>   add_equation(\"B_h = B_d\") |>   add_equation(\"B_s = B_s[-1] + (G + r[-1] * B_s[-1]) - (T_x + r[-1] * B_cb[-1])\") |>   add_equation(\"H_s = H_s[-1] + B_cb - B_cb[-1]\") |>   add_equation(\"B_cb = B_s - B_h\") |>   add_equation(\"Yd_e = Yd * (1 + Ra)\") |>   add_equation(\"Ra = rnorm(1, 0, 0.05)\") |>   add_equation(\"H_h = H_s\", hidden = T) # Simulate model model_pcex <- simulate_scenario(model_pcex,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_pcex, scenario = c(\"baseline\"), from = 1, to = 50,   expressions = c(\"H_h\", \"H_d\") )"},{"path":"https://gamrot.github.io/godley/articles/11_Model_PCEX.html","id":"model-pcex1---adaptive-expectations","dir":"Articles","previous_headings":"","what":"Model PCEX1 - adaptive expectations","title":"Model PCEX","text":"scenario, assume expectations current disposable income based actual disposable income previous period. apply model, first create empty SFC model: Next, define relevant variables: Following , update equation expected disposable income previous example :Yd_e = Yd[-1] Now, can simulate model (example, baseline scenario 100 periods using Newton method): simulation estimated, can create plot visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_pcex1 <- create_model(name = \"SFC PCEX1\") #> Empty model created # Add variables model_pcex1 <- model_pcex1 |>   add_variable(\"B_cb\", desc = \"\") |>   add_variable(\"H_s\", desc = \"\") |>   add_variable(\"B_s\", desc = \"\") |>   add_variable(\"B_h\", desc = \"\") |>   add_variable(\"H_d1\", desc = \"\") |>   add_variable(\"H_d\", desc = \"\") |>   add_variable(\"H_h\", desc = \"\") |>   add_variable(\"C\", desc = \"\") |>   add_variable(\"V\", desc = \"\") |>   add_variable(\"T_x\", desc = \"\") |>   add_variable(\"Y\", desc = \"Income = GDP\") |>   add_variable(\"Yd\", desc = \"Disposable income of households\") |>   add_variable(\"Yd_e\") |>   add_variable(\"B_d\") |>   add_variable(\"V_e\") |>   add_variable(\"alpha1\", init = 0.6, desc = \"Propensity to consume out of income\") |>   add_variable(\"alpha2\", init = 0.4, desc = \"Propensity to consume out of wealth\") |>   add_variable(\"theta\", init = 0.2, desc = \"Tax rate\") |>   add_variable(\"r\", init = 0.025, desc = \"\") |>   add_variable(\"G\", init = 20, desc = \"Government demand\") |>   add_variable(\"lambda0\", init = 0.635, desc = \"\") |>   add_variable(\"lambda1\", init = 0.05, desc = \"\") |>   add_variable(\"lambda2\", init = 0.01, desc = \"\") # Add equations model_pcex1 <- model_pcex1 |>   add_equation(\"Y = C + G\", desc = \"\") |>   add_equation(\"Yd = Y - T_x + r[-1] * B_h[-1]\") |>   add_equation(\"T_x = theta * (Y + r[-1] * B_h[-1])\") |>   add_equation(\"V = V[-1] + (Yd - C)\") |>   add_equation(\"C = alpha1 * Yd_e + alpha2 * V[-1]\") |>   add_equation(\"B_d =  V_e * lambda0 + V_e * lambda1 * r - lambda2 * Yd_e\") |>   add_equation(\"H_d1 = V_e * (1 - lambda0) - V_e * lambda1 * r + lambda2 * Yd_e\") |>   add_equation(\"H_d = V_e - B_d\") |>   add_equation(\"V_e = V[-1] + (Yd_e - C)\") |>   add_equation(\"H_h = V - B_h\") |>   add_equation(\"B_h = B_d\") |>   add_equation(\"B_s = B_s[-1] + (G + r[-1] * B_s[-1]) - (T_x + r[-1] * B_cb[-1])\") |>   add_equation(\"H_s = H_s[-1] + B_cb - B_cb[-1]\") |>   add_equation(\"B_cb = B_s - B_h\") |>   add_equation(\"Yd_e = Yd[-1]\") |>   add_equation(\"H_h = H_s\", hidden = T) # Simulate model model_pcex1 <- simulate_scenario(model_pcex1,   scenario = \"baseline\", max_iter = 350,   periods = 100, hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_pcex1, scenario = c(\"baseline\"), from = 1, to = 50,   expressions = c(\"Y\") )"},{"path":"https://gamrot.github.io/godley/articles/11_Model_PCEX.html","id":"shock---increase-in-the-propensity-to-consume-out-of-disposable-income","dir":"Articles","previous_headings":"Model PCEX1 - adaptive expectations","what":"Shock - increase in the propensity to consume out of disposable income","title":"Model PCEX","text":"Now can simulate impact economy propensity consume disposable income increases 0.7. First, create empty shock object add new equation alpha1: Now can simulatem shock scenario: Finally, results, can plot national income, evolution consumption, expected disposable income, lagged wealth.","code":"# Create empty shock shock_pcex1 <- create_shock() #> Shock object created  # Add shock equation with increased government expenditures shock_pcex1 <- add_shock(shock_pcex1,   variable = \"alpha1\",   value = 0.7,   desc = \"Increase in the propensity to consume out of disposable income\",   start = 5, end = 50 )  # Create new scenario with this shock model_pcex1 <- add_scenario(model_pcex1,   name = \"expansion\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_pcex1 ) # Simulate shock model_pcex1 <- simulate_scenario(model_pcex1,   scenario = \"expansion\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_pcex1, scenario = c(\"expansion\"), from = 1, to = 50,   expressions = c(\"Y\") ) # Plot results plot_simulation(   model = model_pcex1, scenario = c(\"expansion\"), from = 1, to = 50,   expressions = c(\"Yd_e\", \"C\", \"V\") )"},{"path":"https://gamrot.github.io/godley/articles/11_Model_PCEX.html","id":"model-pcex2---where-the-propensity-to-consume-reacts-negatively-to-higher-interest-rates","dir":"Articles","previous_headings":"","what":"Model PCEX2 - where the propensity to consume reacts negatively to higher interest rates","title":"Model PCEX","text":", assume expectations regarding current disposable income based previous period’s actual disposable income, previous example. However, propensity consume now reacts negatively higher interest rates (decreases interest rates rise). apply model, need add two new variables, iota alpha10, used PCEX1, include additional equation:alpha1 = alpha10 - iota * r[-1]. begin, create empty SFC model: , define variables model: Specify relationships variables adding equations: Now, can simulate model (example, baseline scenario 100 periods using Newton method): simulation estimated, can create plot visualize outcomes variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_pcex2 <- create_model(name = \"SFC PCEX2\") #> Empty model created # Add variables model_pcex2 <- model_pcex2 |>   add_variable(\"B_cb\", desc = \"\") |>   add_variable(\"H_s\", desc = \"\") |>   add_variable(\"B_s\", desc = \"\") |>   add_variable(\"B_h\", desc = \"\") |>   add_variable(\"H_d1\", desc = \"\") |>   add_variable(\"H_d\", desc = \"\") |>   add_variable(\"H_h\", desc = \"\") |>   add_variable(\"C\", desc = \"\") |>   add_variable(\"V\", desc = \"\") |>   add_variable(\"T_x\", desc = \"\") |>   add_variable(\"Y\", desc = \"Income = GDP\") |>   add_variable(\"Yd\", desc = \"Disposable income of households\") |>   add_variable(\"Yd_e\") |>   add_variable(\"B_d\") |>   add_variable(\"V_e\") |>   add_variable(\"iota\", init = 4) |>   add_variable(\"alpha10\", init = 0.7) |>   add_variable(\"alpha1\", init = 0.6, desc = \"Propensity to consume out of income\") |>   add_variable(\"alpha2\", init = 0.4, desc = \"Propensity to consume out of wealth\") |>   add_variable(\"theta\", init = 0.2, desc = \"Tax rate\") |>   add_variable(\"r\", init = 0.025, desc = \"\") |>   add_variable(\"G\", init = 20, desc = \"Government demand\") |>   add_variable(\"lambda0\", init = 0.635, desc = \"\") |>   add_variable(\"lambda1\", init = 0.05, desc = \"\") |>   add_variable(\"lambda2\", init = 0.01, desc = \"\") # Add equations model_pcex2 <- model_pcex2 |>   add_equation(\"Y = C + G\", desc = \"\") |>   add_equation(\"Yd = Y - T_x + r[-1] * B_h[-1]\") |>   add_equation(\"T_x = theta * (Y + r[-1] * B_h[-1])\") |>   add_equation(\"V = V[-1] + (Yd - C)\") |>   add_equation(\"C = alpha1 * Yd_e + alpha2 * V[-1]\") |>   add_equation(\"B_d =  V_e * lambda0 + V_e * lambda1 * r - lambda2 * Yd_e\") |>   add_equation(\"H_d1 = V_e * (1 - lambda0) - V_e * lambda1 * r + lambda2 * Yd_e\") |>   add_equation(\"H_d = V_e - B_d\") |>   add_equation(\"V_e = V[-1] + (Yd_e - C)\") |>   add_equation(\"H_h = V - B_h\") |>   add_equation(\"B_h = B_d\") |>   add_equation(\"B_s = B_s[-1] + (G + r[-1] * B_s[-1]) - (T_x + r[-1] * B_cb[-1])\") |>   add_equation(\"H_s = H_s[-1] + B_cb - B_cb[-1]\") |>   add_equation(\"B_cb = B_s - B_h\") |>   add_equation(\"Yd_e = Yd[-1]\") |>   add_equation(\"alpha1 = alpha10 - iota * r[-1]\") |>   add_equation(\"H_h = H_s\", hidden = T) # Simulate model model_pcex2 <- simulate_scenario(model_pcex2,   scenario = \"baseline\", max_iter = 350,   periods = 100, hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_pcex2, scenario = c(\"baseline\"), from = 1, to = 50,   expressions = c(\"Y\") )"},{"path":"https://gamrot.github.io/godley/articles/11_Model_PCEX.html","id":"shock---increase-in-the-rate-of-interest-on-bills","dir":"Articles","previous_headings":"Model PCEX2 - where the propensity to consume reacts negatively to higher interest rates","what":"Shock - increase in the rate of interest on bills","title":"Model PCEX","text":"Now, can simulate effects economy 100-point increase interest rate bills. start, create empty shock object add new equation r: Afterward, can simulate shock scenario: results, can visualize national income, evolution consumption, expected disposable income, lagged wealth:","code":"# Create empty shock shock_pcex2 <- create_shock() #> Shock object created  # Add shock equation with increased government expenditures shock_pcex2 <- add_shock(shock_pcex2,   variable = \"r\",   value = 0.035,   desc = \"Increase in the rate of interest on bills\",   start = 5, end = 50 )  # Create new scenario with this shock model_pcex2 <- add_scenario(model_pcex2,   name = \"expansion\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_pcex2 ) # Simulate shock model_pcex2 <- simulate_scenario(model_pcex2,   scenario = \"expansion\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_pcex2, scenario = c(\"expansion\"), from = 1, to = 50,   expressions = c(\"Y\") ) # Plot results plot_simulation(   model = model_pcex2, scenario = c(\"expansion\"),   from = 1, to = 50,   expressions = c(\"Yd\", \"C\", \"V\") )"},{"path":"https://gamrot.github.io/godley/articles/11_Model_PCEX.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model PCEX","text":"details PC models expectations (PCEX), see Chapter 4 Monetary Economics: Integrated Approach Credit, Money, Income, Production, Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/Model_BMW.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model BMW","text":"Start creating empty SFC model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, baseline scenario 100 periods using Gauss method): simulation estimated, can create plot visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_bmw <- create_model(name = \"SFC BMW\") #> Empty model created # Add variables model_bmw <- model_bmw |>   add_variable(\"rl\", init = 0.025) |>   add_variable(\"alpha0\", init = 20) |>   add_variable(\"alpha1\", init = 0.75) |>   add_variable(\"alpha2\", init = 0.10) |>   add_variable(\"delta\", init = 0.10) |>   add_variable(\"gamma\", init = 0.15) |>   add_variable(\"kappa\", init = 1) |>   add_variable(\"pr\", init = 1) |>   add_variable(\"Nd\", init = .001) |>   add_variable(\"Ns\", init = .001) |>   add_variable(\"Y\", init = .001) |>   add_variable(\"Cs\") |>   add_variable(\"Cd\") |>   add_variable(\"Is\") |>   add_variable(\"Id\") |>   add_variable(\"Ls\") |>   add_variable(\"Ld\") |>   add_variable(\"WBd\") |>   add_variable(\"AF\") |>   add_variable(\"K\") |>   add_variable(\"YD\") |>   add_variable(\"WBs\") |>   add_variable(\"rm\") |>   add_variable(\"Mh\") |>   add_variable(\"Ms\") |>   add_variable(\"W\") |>   add_variable(\"DA\") |>   add_variable(\"KT\") # Add equations model_bmw <- model_bmw |>   add_equation(\"Cs = Cd\") |>   add_equation(\"Is = Id\") |>   add_equation(\"Ns = Nd\") |>   add_equation(\"Ls = Ls[-1] + Ld - Ld[-1]\") |>   add_equation(\"Y = Cs + Is\") |>   add_equation(\"WBd = Y - rl[-1] * Ld[-1] - AF\") |>   add_equation(\"AF = delta * K[-1]\") |>   add_equation(\"Ld = Ld[-1] + Id - AF\") |>   add_equation(\"YD = WBs + rm[-1] * Mh[-1]\") |>   add_equation(\"Mh = Mh[-1] + YD - Cd\") |>   add_equation(\"Ms = Ms[-1] + Ls - Ls[-1]\") |>   add_equation(\"rm = rl\") |>   add_equation(\"WBs = W * Ns\") |>   add_equation(\"Nd = Y / pr\") |>   add_equation(\"W = WBd / Nd\") |>   add_equation(\"Cd = alpha0 + alpha1 * YD + alpha2 * Mh[-1]\") |>   add_equation(\"K = K[-1] + Id - DA\") |>   add_equation(\"DA = delta * K[-1]\") |>   add_equation(\"KT = kappa * Y[-1]\") |>   add_equation(\"Id = gamma * (KT - K[-1]) + DA\") |>   add_equation(\"Ms = Mh\", hidden = TRUE) # Simulate model model_bmw <- simulate_scenario(model_bmw,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_bmw, scenario = c(\"baseline\"), from = 1, to = 50,   expressions = c(\"Cd\", \"YD\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_BMW.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model BMW","text":"godley package can simulate shocks affect economy (specifically, impact base scenario).","code":""},{"path":"https://gamrot.github.io/godley/articles/Model_BMW.html","id":"shock-1","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 1","title":"Model BMW","text":"example observe effect increased autonomous consumption expenditures. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Finally, display results shock scenario:","code":"# Create empty shock shock_bmw <- create_shock() #> Shock object created # Add shock equation with increase in autonomous consumption expenditures shock_bmw <- add_shock(shock_bmw,   variable = \"alpha0\",   value = 30,   desc = \"Increase in autonomous consumption expenditures\",   start = 5, end = 50 ) # Create new scenario with this shock model_bmw <- add_scenario(model_bmw,   name = \"expansion1\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_bmw ) # Simulate shock model_bmw <- simulate_scenario(model_bmw,   scenario = \"expansion1\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Simulating scenario expansion1 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_bmw, scenario = c(\"expansion1\"), from = 1, to = 50,   expressions = c(\"Cd\", \"YD\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_BMW.html","id":"shock-2","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 2","title":"Model BMW","text":"second example, propose introduce increase propensity save. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Display results plot:","code":"# Create empty shock shock_bmw <- create_shock() #> Shock object created # Add shock equation with increased propensity to save shock_bmw <- add_shock(shock_bmw,   variable = \"alpha1\",   value = 0.7,   desc = \"Increase in the propensity to save\",   start = 5, end = 50 ) # Create new scenario with this shock model_bmw <- add_scenario(model_bmw,   name = \"expansion2\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_bmw ) # Simulate shock model_bmw <- simulate_scenario(model_bmw,   scenario = \"expansion2\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Simulating scenario expansion2 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_bmw, scenario = c(\"expansion2\"), from = 1, to = 50,   expressions = c(\"Cd\", \"YD\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_BMW.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model BMW","text":"details BMW model, refer Chapter 7 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/Model_BMWK.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model BMWK","text":"Start creating empty SFC model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, baseline scenario 100 periods using Gauss method): simulation estimated, can create plot visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_bmwk <- create_model(name = \"SFC BMWK\") #> Empty model created # Add variables model_bmwk <- model_bmwk |>   add_variable(\"rl\", init = 0.025) |>   add_variable(\"alpha0\", init = 20) |>   add_variable(\"alpha2\", init = 0.10) |>   add_variable(\"delta\", init = 0.10) |>   add_variable(\"gamma\", init = 0.15) |>   add_variable(\"kappa\", init = 1) |>   add_variable(\"pr\", init = 1) |>   add_variable(\"Nd\", init = .001) |>   add_variable(\"Ns\", init = .001) |>   add_variable(\"Y\", init = .001) |>   add_variable(\"alpha1w\", init = .8) |>   add_variable(\"alpha1r\", init = .15) |>   add_variable(\"Cs\") |>   add_variable(\"Cd\") |>   add_variable(\"Is\") |>   add_variable(\"Id\") |>   add_variable(\"Ls\") |>   add_variable(\"Ld\") |>   add_variable(\"WBd\") |>   add_variable(\"AF\") |>   add_variable(\"K\") |>   add_variable(\"YD\") |>   add_variable(\"WBs\") |>   add_variable(\"rm\") |>   add_variable(\"Mh\") |>   add_variable(\"Ms\") |>   add_variable(\"W\") |>   add_variable(\"DA\") |>   add_variable(\"KT\") # Add equations model_bmwk <- model_bmwk |>   add_equation(\"Cs = Cd\") |>   add_equation(\"Is = Id\") |>   add_equation(\"Ns = Nd\") |>   add_equation(\"Ls = Ls[-1] + Ld - Ld[-1]\") |>   add_equation(\"Y = Cs + Is\") |>   add_equation(\"WBd = Y - rl[-1] * Ld[-1] - AF\") |>   add_equation(\"AF = delta * K[-1]\") |>   add_equation(\"Ld = Ld[-1] + Id - AF\") |>   add_equation(\"YD = WBs + rm[-1] * Mh[-1]\") |>   add_equation(\"Mh = Mh[-1] + YD - Cd\") |>   add_equation(\"Ms = Ms[-1] + Ls - Ls[-1]\") |>   add_equation(\"rm = rl\") |>   add_equation(\"WBs = W * Ns\") |>   add_equation(\"Nd = Y / pr\") |>   add_equation(\"W = WBd / Nd\") |>   add_equation(\"Cd = alpha0 + alpha1w * WBs + alpha1r * rm[-1] * Mh[-1] + alpha2 * Mh\") |>   add_equation(\"K = K[-1] + Id - DA\") |>   add_equation(\"DA = delta * K[-1]\") |>   add_equation(\"KT = kappa * Y[-1]\") |>   add_equation(\"Id = gamma * (KT - K[-1]) + DA\") |>   add_equation(\"Ms = Mh\", hidden = TRUE) # Simulate model model_bmwk <- simulate_scenario(model_bmwk,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_bmwk, scenario = c(\"baseline\"), from = 1, to = 50,   expressions = c(\"Y\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_BMWK.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model BMWK","text":"godley package can simulate shocks affect economy (specifically, impact base scenario). example, simulate effect increase interest rate. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Plot simulation outcomes:","code":"# Create empty shock shock_bmwk <- create_shock() #> Shock object created # Add shock equation shock_bmwk <- add_shock(shock_bmwk,   variable = \"rl\",   value = 0.035,   desc = \"Increase in the interest rate\", start = 5, end = 50 ) # Create new scenario with this shock model_bmwk <- add_scenario(model_bmwk,   name = \"expansion\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_bmwk ) # Simulate shock model_bmwk <- simulate_scenario(model_bmwk,   scenario = \"expansion\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_bmwk, scenario = c(\"expansion\"), from = 1, to = 50,   expressions = c(\"Y\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_BMWK.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model BMWK","text":"details BMWK model, refer Chapter 7 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/Model_DIS.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model DIS","text":"Start creating empty SFC model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, baseline scenario 100 periods using Gauss method): simulation estimated, can create plot visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_dis <- create_model(name = \"SFC DIS\") #> Empty model created # Add variables model_dis <- model_dis |>   add_variable(\"rl\", init = 0.025) |>   add_variable(\"pr\", init = 1) |>   add_variable(\"W\", init = 0.75) |>   add_variable(\"add\", init = 0.02) |>   add_variable(\"alpha0\", init = 15) |>   add_variable(\"alpha1\", init = 0.8) |>   add_variable(\"alpha2\", init = 0.1) |>   add_variable(\"beta\", init = 0.75) |>   add_variable(\"epsilon\", init = 0.75) |>   add_variable(\"gamma\", init = 0.25) |>   add_variable(\"phi\", init = 0.25) |>   add_variable(\"sigma_T\", init = 0.15) |>   add_variable(\"y\", init = .001) |>   add_variable(\"p\", init = .001) |>   add_variable(\"NHUC\", init = .001) |>   add_variable(\"s_E\", init = .001) |>   add_variable(\"inv_T\") |>   add_variable(\"inv_E\") |>   add_variable(\"inv\") |>   add_variable(\"s\") |>   add_variable(\"c\") |>   add_variable(\"N\") |>   add_variable(\"WB\") |>   add_variable(\"UC\") |>   add_variable(\"INV\") |>   add_variable(\"S\") |>   add_variable(\"EF\") |>   add_variable(\"Ld\") |>   add_variable(\"Ls\") |>   add_variable(\"Ms\") |>   add_variable(\"rm\") |>   add_variable(\"EFb\") |>   add_variable(\"Mh\") |>   add_variable(\"YD\") |>   add_variable(\"C\") |>   add_variable(\"ydhs\") |>   add_variable(\"mh\") |>   add_variable(\"ydhs_E\") # Add equations model_dis <- model_dis |>   add_equation(\"y = s_E + inv_E - inv[-1]\") |>   add_equation(\"inv_T = sigma_T * s_E\") |>   add_equation(\"inv_E = inv[-1] + gamma * (inv_T - inv[-1])\") |>   add_equation(\"inv = inv[-1] + (y - s)\") |>   add_equation(\"s_E = beta * s[-1] + (1 - beta) * s_E[-1]\") |>   add_equation(\"s = c\") |>   add_equation(\"N = y / pr\") |>   add_equation(\"WB = N * W\") |>   add_equation(\"UC = WB / y\") |>   add_equation(\"INV = inv * UC\") |>   add_equation(\"S = p * s\") |>   add_equation(\"p = (1 + phi) * NHUC\") |>   add_equation(\"NHUC = (1 - sigma_T) * UC + sigma_T * (1 + rl[-1]) * UC[-1]\") |>   add_equation(\"EF = S - WB + (INV - INV[-1]) - rl[-1] * INV[-1]\") |>   add_equation(\"Ld = INV\") |>   add_equation(\"Ls = Ld\") |>   add_equation(\"Ms = Ls\") |>   add_equation(\"rm = rl - add\") |>   add_equation(\"EFb = rl[-1] * Ls[-1] - rm[-1] * Mh[-1]\") |>   add_equation(\"YD = WB + EF + EFb + rm[-1] * Mh[-1]\") |>   add_equation(\"Mh = Mh[-1] + YD - C\") |>   add_equation(\"ydhs = c + (mh - mh[-1])\") |>   add_equation(\"C = c * p\") |>   add_equation(\"mh = Mh / p\") |>   add_equation(\"c = alpha0 + alpha1 * ydhs_E + alpha2 * mh[-1]\") |>   add_equation(\"ydhs_E = epsilon * ydhs[-1] + (1 - epsilon) * ydhs_E[-1]\") |>   add_equation(\"Mh = Ms\", hidden = TRUE) # Simulate model model_dis <- simulate_scenario(model_dis,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_dis, scenario = c(\"baseline\"), from = 1, to = 40,   expressions = c(\"ydhs\", \"c\") ) # Plot results plot_simulation(   model = model_dis, scenario = c(\"baseline\"), from = 1, to = 40,   expressions = c(     \"delta_inv = inv - dplyr::lag(inv)\",     \"delta_inv_E = inv_E - dplyr::lag(inv_E)\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/Model_DIS.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model DIS","text":"godley package can simulate shocks affect economy (specifically, impact base scenario).","code":""},{"path":"https://gamrot.github.io/godley/articles/Model_DIS.html","id":"shock-1","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 1","title":"Model DIS","text":"initial example demonstrates effect one-shot increase costing margin. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Display results plot:","code":"# Create empty shock shock_dis <- create_shock() #> Shock object created # Add shock equation shock_dis <- add_shock(shock_dis,   variable = \"phi\",   value = 0.35,   desc = \"One-shot increase in the costing margin\",   start = 5, end = 40 ) # Create new scenario with this shock model_dis <- add_scenario(model_dis,   name = \"expansion1\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_dis ) # Simulate shock model_dis <- simulate_scenario(model_dis,   scenario = \"expansion1\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion1 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_dis, scenario = c(\"expansion1\"), from = 1, to = 40,   expressions = c(\"c\", \"ydhs\") ) # Plot results plot_simulation(   model = model_dis, scenario = c(\"expansion1\"), from = 1, to = 40,   expressions = c(     \"delta_inv = inv - dplyr::lag(inv)\",     \"delta_inv_E = inv_E - dplyr::lag(inv_E)\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/Model_DIS.html","id":"shock-2","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 2","title":"Model DIS","text":"Another example conveys impact increase target inventory--sales ratio. First, initialize empty shock object: Add appropriate equation: Integrate shock model creating new scenario: Simulate model shock applied: Plot results:","code":"# Create empty shock shock_dis <- create_shock() #> Shock object created # Add shock equation shock_dis <- add_shock(shock_dis,   variable = \"sigma_T\",   value = 0.25,   desc = \"Increase in the target inventories to sales ratio\",   start = 5, end = 50 ) # Create new scenario with this shock model_dis <- add_scenario(model_dis,   name = \"expansion2\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_dis ) # Simulate shock model_dis <- simulate_scenario(model_dis,   scenario = \"expansion2\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion2 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_dis, scenario = c(\"expansion2\"), from = 1, to = 40,   expressions = c(\"c\", \"ydhs\") ) # Plot results plot_simulation(   model = model_dis, scenario = c(\"expansion2\"), from = 1, to = 40,   expressions = c(     \"delta_inv = inv - dplyr::lag(inv)\",     \"delta_inv_E = inv_E - dplyr::lag(inv_E)\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/Model_DIS.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model DIS","text":"details DIS model, refer Chapter 9 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/Model_DISINF.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model DISINF","text":"Start creating empty SFC model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, baseline scenario 100 periods using Gauss method): simulation estimated, can create plot visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_disinf <- create_model(name = \"SFC DISINF\") #> Empty model created # Add variables model_disinf <- model_disinf |>   add_variable(\"rrc\", init = 0.025) |>   add_variable(\"pr\", init = 1) |>   add_variable(\"add\", init = 0.02) |>   add_variable(\"alpha0\", init = 15) |>   add_variable(\"alpha1\", init = 0.8) |>   add_variable(\"alpha2\", init = 0.1) |>   add_variable(\"beta\", init = 0.9) |>   add_variable(\"epsilon\", init = 0.8) |>   add_variable(\"gamma\", init = 0.25) |>   add_variable(\"phi\", init = 0.24) |>   add_variable(\"sigma_T\", init = 0.2) |>   add_variable(\"Omega0\", init = -1.4) |>   add_variable(\"Omega1\", init = 1) |>   add_variable(\"Omega2\", init = 1.2) |>   add_variable(\"Omega3\", init = 0.3) |>   add_variable(\"p\", init = 1) |>   add_variable(\"W\", init = 1) |>   add_variable(\"UC\", init = 1) |>   add_variable(\"s_E\", init = .00001) |>   add_variable(\"inv_T\") |>   add_variable(\"inv_E\") |>   add_variable(\"inv\") |>   add_variable(\"s\") |>   add_variable(\"c\") |>   add_variable(\"N\") |>   add_variable(\"WB\") |>   add_variable(\"INV\") |>   add_variable(\"S\") |>   add_variable(\"EF\") |>   add_variable(\"Ld\") |>   add_variable(\"Ls\") |>   add_variable(\"Ms\") |>   add_variable(\"rm\") |>   add_variable(\"EFb\") |>   add_variable(\"Mh\") |>   add_variable(\"YD\") |>   add_variable(\"C\") |>   add_variable(\"omega_T\") |>   add_variable(\"Nfe\") |>   add_variable(\"yfe\") |>   add_variable(\"mh\") |>   add_variable(\"y\") |>   add_variable(\"rl\") |>   add_variable(\"pic\") |>   add_variable(\"ydhs\") |>   add_variable(\"yd\") |>   add_variable(\"ydhs_E\") # Add equations model_disinf <- model_disinf |>   add_equation(\"y = s_E + inv_E - inv[-1]\") |>   add_equation(\"inv_T = sigma_T * s_E\") |>   add_equation(\"inv_E = inv[-1] + gamma * (inv_T - inv[-1])\") |>   add_equation(\"inv = inv[-1] + (y - s)\") |>   add_equation(\"s_E = beta * s[-1] + (1 - beta) * s_E[-1]\") |>   add_equation(\"s = c\") |>   add_equation(\"N = y / pr\") |>   add_equation(\"WB = N * W\") |>   add_equation(\"UC = WB / y\") |>   add_equation(\"INV = inv * UC\") |>   add_equation(\"S = p * s\") |>   add_equation(\"p = (1 + phi) * (1 + rrc * sigma_T) * UC\") |>   add_equation(\"EF = S - WB + (INV - INV[-1]) - rl * INV[-1]\") |>   add_equation(\"Ld = INV\") |>   add_equation(\"Ls = Ld\") |>   add_equation(\"Ms = Ls\") |>   add_equation(\"rm = rl - add\") |>   add_equation(\"EFb = rl[-1] * Ls[-1] - rm[-1] * Mh[-1]\") |>   add_equation(\"pic = (UC / UC[-1]) - 1\") |>   add_equation(\"rl = (1 + rrc) * (1 + pic) - 1\") |>   add_equation(\"YD = WB + EF + EFb + rm * Mh[-1]\") |>   add_equation(\"Mh = Mh[-1] + YD - C\") |>   add_equation(\"ydhs = c + (mh - mh[-1])\") |>   add_equation(\"yd = YD / p\") |>   add_equation(\"C = c * p\") |>   add_equation(\"mh = Mh / p\") |>   add_equation(\"c = alpha0 + alpha1 * ydhs_E + alpha2 * mh[-1]\") |>   add_equation(\"ydhs_E = epsilon * ydhs[-1] + (1 - epsilon) * ydhs_E[-1]\") |>   add_equation(\"omega_T = Omega0 + Omega1 * pr + Omega2 * (N / Nfe)\") |>   add_equation(\"W = W[-1] * (1 + Omega3 * (omega_T[-1] - (W[-1]/p[-1])))\") |>   add_equation(\"yfe = (1 + sigma_T) * s - inv[-1]\") |>   add_equation(\"Nfe = s / pr\") # Simulate model model_disinf <- simulate_scenario(model_disinf,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_disinf, scenario = c(\"baseline\"),   from = 1, to = 40,   expressions = c(\"p\", \"UC\", \"UCp = UC/p\") ) # Plot results plot_simulation(   model = model_disinf, scenario = c(\"baseline\"),   from = 1, to = 40,   expressions = c(\"inflation = (p - dplyr::lag(p)) / dplyr::lag(p)\") ) # Plot results plot_simulation(   model = model_disinf, scenario = c(\"baseline\"),   from = 1, to = 40,   expressions = c(     \"ydhs_ss = alpha0 / (1 - alpha1 - alpha2*sigma_T * (UC/p))\",     \"ydhs\", \"c\", \"s\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/Model_DISINF.html","id":"shock-scenarios","dir":"Articles","previous_headings":"","what":"Shock scenarios","title":"Model DISINF","text":"godley package can simulate shocks affect base scenario.","code":""},{"path":"https://gamrot.github.io/godley/articles/Model_DISINF.html","id":"shock-1","dir":"Articles","previous_headings":"Shock scenarios","what":"Shock 1","title":"Model DISINF","text":"first example demonstrates effect increase costing margins. First, initialize empty shock object: , define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Finally, plot simulation results:","code":"# Create empty shock shock_disinf <- create_shock() #> Shock object created # Add shock equation shock_disinf <- add_shock(shock_disinf,   variable = \"phi\",   value = 0.3,   desc = \"Increase in the costing margins\",   start = 5, end = 50 ) # Create new scenario with this shock model_disinf <- add_scenario(model_disinf,   name = \"expansion1\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_disinf ) # Simulate shock model_disinf <- simulate_scenario(model_disinf,   scenario = \"expansion1\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion1 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_disinf, scenario = c(\"expansion1\"), from = 1, to = 40,   expressions = c(\"p\", \"UC\", \"UCp = UC/p\") ) # Plot results plot_simulation(   model = model_disinf, scenario = c(\"expansion1\"), from = 1, to = 40,   expressions = c(\"inflation = (p - dplyr::lag(p)) / dplyr::lag(p)\") ) # Plot results plot_simulation(   model = model_disinf, scenario = c(\"expansion1\"), from = 1, to = 40,   expressions = c(     \"ydhs_ss = alpha0 / (1 - alpha1 - alpha2*sigma_T * (UC/p))\",     \"ydhs\", \"c\", \"s\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/Model_DISINF.html","id":"shock-2","dir":"Articles","previous_headings":"Shock scenarios","what":"Shock 2","title":"Model DISINF","text":"example applies increase target real wage. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Finally, plot simulation outcomes:","code":"# Create empty shock shock_disinf <- create_shock() #> Shock object created # Add shock equation shock_disinf <- add_shock(shock_disinf,   variable = \"Omega0\",   value = -1,   desc = \"Increase in the target real wage\",   start = 5, end = 100 ) # Create new scenario with this shock model_disinf <- add_scenario(model_disinf,   name = \"expansion2\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_disinf ) # Simulate shock model_disinf <- simulate_scenario(model_disinf,   scenario = \"expansion2\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion2 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_disinf, scenario = c(\"expansion2\"), from = 1, to = 40,   expressions = c(\"p\", \"UC\", \"UCp = UC/p\") ) # Plot results plot_simulation(   model = model_disinf, scenario = c(\"expansion2\"), from = 1, to = 40,   expressions = c(\"inflation = (p - dplyr::lag(p)) / dplyr::lag(p)\") ) # Plot results plot_simulation(   model = model_disinf, scenario = c(\"expansion2\"), from = 1, to = 40,   expressions = c(     \"ydhs_ss = alpha0 / (1 - alpha1 - alpha2*sigma_T * (UC/p))\",     \"ydhs\", \"c\", \"s\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/Model_DISINF.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model DISINF","text":"details DISINF model, refer Chapter 9 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/Model_LP.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model LP","text":"Start initializing empty SFC (Stock-Flow Consistent) model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, calculate baseline scenario 100 periods using Gauss method) simulation estimated, visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_lp <- create_model(name = \"SFC LP\") #> Empty model created # Add variables model_lp <- model_lp |>   add_variable(\"Y\", desc = \"\") |>   add_variable(\"YDr\") |>   add_variable(\"TX\") |>   add_variable(\"V\", init = 0.0000001) |>   add_variable(\"CG\") |>   add_variable(\"C\") |>   add_variable(\"VE\", init = 0.0000001) |>   add_variable(\"Hh\") |>   add_variable(\"Hd\") |>   add_variable(\"Bd\") |>   add_variable(\"BLd\") |>   add_variable(\"BLh\", desc = \"\") |>   add_variable(\"Bs\", desc = \"\") |>   add_variable(\"Hs\", desc = \"\") |>   add_variable(\"Bcb\", desc = \"\") |>   add_variable(\"BLs\", desc = \"\") |>   add_variable(\"ERrbl\", desc = \"\") |>   add_variable(\"rbl\", desc = \"\") |>   add_variable(\"CGE\", desc = \"\") |>   add_variable(\"YDEr\", desc = \"\") |>   add_variable(\"pebl\", desc = \"\") |>   add_variable(\"Bh\", desc = \"\") |>   add_variable(\"alpha1\", init = 0.8, desc = \"Propensity to consume out of income\") |>   add_variable(\"alpha2\", init = 0.2, desc = \"Propensity to consume out of wealth\") |>   add_variable(\"theta\", init = 0.1938, desc = \"Tax rate\") |>   add_variable(\"rb\", init = 0.03, desc = \"\") |>   add_variable(\"G\", init = 20, desc = \"Government demand\") |>   add_variable(\"pbl\", init = 20, desc = \"\") |>   add_variable(\"lambda20\", init = 0.44196, desc = \"\") |>   add_variable(\"lambda22\", init = 1.1, desc = \"\") |>   add_variable(\"lambda23\", init = -1, desc = \"\") |>   add_variable(\"lambda24\", init = -0.03, desc = \"\") |>   add_variable(\"lambda30\", init = .3997, desc = \"\") |>   add_variable(\"lambda32\", init = -1, desc = \"\") |>   add_variable(\"lambda33\", init = 1.1, desc = \"\") |>   add_variable(\"lambda34\", init = -0.03, desc = \"\") |>   add_variable(\"chi\", init = 0.1, desc = \"\") # Add equations model_lp <- model_lp |>   add_equation(\"Y=C + G\", desc = \"\") |>   add_equation(\"YDr= Y - TX + rb[-1] * Bh[-1] + BLh[-1]\") |>   add_equation(\"TX =theta * (Y + rb[-1] * Bh[-1] + BLh[-1])\") |>   add_equation(\"V = V[-1] + (YDr - C) + CG\") |>   add_equation(\"CG = (pbl - pbl[-1]) * BLh[-1]\") |>   add_equation(\"C = alpha1 * YDEr + alpha2 * V[-1]\") |>   add_equation(\"VE = V[-1] + (YDEr - C) + CG\") |>   add_equation(\"Hh = V - Bh - pbl * BLh\") |>   add_equation(\"Hd = VE - Bd - pbl * BLd\") |>   add_equation(\"Bd = (VE * lambda20) + VE * (lambda22 * rb + lambda23 * ERrbl) + lambda24 * (YDEr)\") |>   add_equation(\"BLd = VE * (lambda30 + lambda32 * rb + lambda33 * ERrbl + lambda34 * (YDEr/VE))/pbl\") |>   add_equation(\"BLh = BLd\", desc = \"\", hidden = F) |>   add_equation(\"Bs = Bs[-1] + (G + rb[-1] * Bs[-1] + BLs[-1]) - (TX + rb[-1] * Bcb[-1])                - ((BLs - BLs[-1]) * pbl)\", desc = \"\", hidden = F) |>   add_equation(\"Hs = Hs[-1] + (Bcb - Bcb[-1])\", desc = \"\", hidden = F) |>   add_equation(\"Bcb = Bs - Bh\", desc = \"\", hidden = F) |>   add_equation(\"BLs = BLh\", desc = \"\", hidden = F) |>   add_equation(\"ERrbl = rbl + chi * ((pebl - pbl)/pbl)\", desc = \"\", hidden = F) |>   add_equation(\"rbl = 1/pbl\", desc = \"\", hidden = F) |>   add_equation(\"CGE = chi * (pebl - pbl) * BLh\", desc = \"\", hidden = F) |>   add_equation(\"YDEr = YDr[-1]\", desc = \"\", hidden = F) |>   add_equation(\"Bh = Bd\", desc = \"\") |>   add_equation(\"pebl = pbl\", desc = \"\") |>   add_equation(\"Hs = Hh\", desc = \"Money equilibrium\", hidden = TRUE) # Simulate model model_lp <- simulate_scenario(model_lp,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-05, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_lp, scenario = c(\"baseline\"), from = 1, to = 50,   expressions = c(\"Y\", \"V\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_LP.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model LP","text":"details LP model, refer Chapter 5 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/Model_OPEN.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model OPEN","text":"Start creating empty SFC model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, calculate baseline scenario 100 periods using Gauss method) simulation estimated, can visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_open <- create_model(name = \"SFC OPEN\") #> Empty model created # Add variables model_open <- model_open |>   add_variable(\"xr\", init = 1) |>   add_variable(\"pg_N\", init = 1) |>   add_variable(\"r_N\", init = 0.025) |>   add_variable(\"r_S\", init = 0.025) |>   add_variable(\"G_S\", init = 20) |>   add_variable(\"G_N\", init = 20) |>   add_variable(\"mu_N\", init = 0.15) |>   add_variable(\"mu_S\", init = 0.15) |>   add_variable(\"alpha1_N\", init = 0.7) |>   add_variable(\"alpha1_S\", init = 0.8) |>   add_variable(\"alpha2_N\", init = 0.3) |>   add_variable(\"alpha2_S\", init = 0.2) |>   add_variable(\"lambda0_N\", init = 0.67) |>   add_variable(\"lambda0_S\", init = 0.67) |>   add_variable(\"lambda1_N\", init = 0.05) |>   add_variable(\"lambda1_S\", init = 0.05) |>   add_variable(\"lambda2_N\", init = 0.01) |>   add_variable(\"lambda2_S\", init = 0.01) |>   add_variable(\"theta_N\", init = 0.2) |>   add_variable(\"theta_S\", init = 0.2) |>   add_variable(\"Y_N\") |>   add_variable(\"Y_S\") |>   add_variable(\"C_N\") |>   add_variable(\"X_N\") |>   add_variable(\"IM_N\") |>   add_variable(\"C_S\") |>   add_variable(\"X_S\") |>   add_variable(\"IM_S\") |>   add_variable(\"YD_N\") |>   add_variable(\"YD_S\") |>   add_variable(\"TX_S\") |>   add_variable(\"TX_N\") |>   add_variable(\"Bh_S\") |>   add_variable(\"Bh_N\") |>   add_variable(\"V_N\") |>   add_variable(\"V_S\") |>   add_variable(\"Hh_N\") |>   add_variable(\"Hh_S\") |>   add_variable(\"Bs_N\") |>   add_variable(\"Bs_S\") |>   add_variable(\"Bcb_N\") |>   add_variable(\"Bcb_S\") |>   add_variable(\"or_N\") |>   add_variable(\"or_S\") |>   add_variable(\"Hs_N\") |>   add_variable(\"Hs_S\") |>   add_variable(\"pg_S\") |>   add_variable(\"deltaor_S\") |>   add_variable(\"deltaor_N\") # Add equations model_open <- model_open |>   add_equation(\"Y_N = C_N + G_N + X_N - IM_N\") |>   add_equation(\"Y_S = C_S + G_S + X_S - IM_S\") |>   add_equation(\"IM_N = mu_N * Y_N\") |>   add_equation(\"IM_S = mu_S * Y_S\") |>   add_equation(\"X_N = IM_S / xr\") |>   add_equation(\"X_S = IM_N * xr\") |>   add_equation(\"YD_N = Y_N - TX_N + r_N[-1] * Bh_N[-1]\") |>   add_equation(\"YD_S = Y_S - TX_S + r_S[-1] * Bh_S[-1]\") |>   add_equation(\"TX_N = theta_N * ( Y_N + r_N[-1] * Bh_N[-1])\") |>   add_equation(\"TX_S = theta_S * ( Y_S + r_S[-1] * Bh_S[-1])\") |>   add_equation(\"V_N = V_N[-1] + ( YD_N - C_N )\") |>   add_equation(\"V_S = V_S[-1] + ( YD_S - C_S )\") |>   add_equation(\"C_N = alpha1_N * YD_N + alpha2_N * V_N[-1]\") |>   add_equation(\"C_S = alpha1_S * YD_S + alpha2_S * V_S[-1]\") |>   add_equation(\"Hh_N = V_N - Bh_N\") |>   add_equation(\"Hh_S = V_S - Bh_S\") |>   add_equation(\"Bh_N = V_N * ( lambda0_N + lambda1_N * r_N - lambda2_N * ( YD_N/V_N ) )\") |>   add_equation(\"Bh_S = V_S * ( lambda0_S + lambda1_S * r_S - lambda2_S * ( YD_S/V_S ) )\") |>   add_equation(\"Bs_N = Bs_N[-1] + ( G_N + r_N[-1] * Bs_N[-1] ) - ( TX_N + r_N[-1] * Bcb_N[-1] )\") |>   add_equation(\"Bs_S = Bs_S[-1] + ( G_S + r_S[-1] * Bs_S[-1] ) - ( TX_S + r_S[-1] * Bcb_S[-1] )\") |>   add_equation(\"Bcb_N = Bs_N - Bh_N\") |>   add_equation(\"Bcb_S = Bs_S - Bh_S\") |>   add_equation(\"or_N = or_N[-1] + (( Hs_N - Hs_N[-1] - ( Bcb_N - Bcb_N[-1] ) )/pg_N)\") |>   add_equation(\"or_S = or_S[-1] + (( Hs_S - Hs_S[-1] - ( Bcb_S - Bcb_S[-1] ) )/pg_S)\") |>   add_equation(\"Hs_N = Hh_N\") |>   add_equation(\"Hs_S = Hh_S\") |>   add_equation(\"pg_S = pg_N * xr\") |>   add_equation(\"deltaor_S = or_S - or_S[-1]\") |>   add_equation(\"deltaor_N = - (or_N - or_N[-1])\") |>   add_equation(\"deltaor_S = deltaor_N\", hidden = TRUE) # Simulate model model_open <- simulate_scenario(model_open,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated plot_simulation(   model = model_open, scenario = \"baseline\", from = 1, to = 50,   expressions = c(     \"TB_N = X_N - IM_N\",     \"TB_S = X_S - IM_S\",     \"GB_N = TX_N - (G_N + dplyr::lag(r_N) * dplyr::lag(Bh_N))\",     \"GB_S = TX_S - (G_S + dplyr::lag(r_S) * dplyr::lag(Bh_S))\"   ) ) plot_simulation(   model = model_open, scenario = \"baseline\", from = 1, to = 50,   expressions = c(\"Y_N\", \"Y_S\") ) plot_simulation(   model = model_open, scenario = \"baseline\", from = 1, to = 50,   expressions = c(\"or_S\", \"or_N\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_OPEN.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model OPEN","text":"godley package can simulate shocks affect economy (specifically, impact base scenario). example demonstrate effect ever-falling gold reserves. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Finally, display results shock scenario:","code":"# Create empty shock shock_open <- create_shock() #> Shock object created # Add shock equation shock_open <- add_shock(shock_open,   variable = \"mu_S\",   value = 0.25,   desc = \"increase in the propensity to import in the South\",   start = 5, end = 50 ) # Create new scenario with this shock model_open <- add_scenario(model_open,   name = \"expansion\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_open ) # Simulate shock model_open <- simulate_scenario(model_open,   scenario = \"expansion\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated plot_simulation(   model = model_open, scenario = \"expansion\", from = 1, to = 50,   expressions = c(     \"TB_N = X_N - IM_N\",     \"TB_S = X_S - IM_S\",     \"GB_N = TX_N - (G_N + dplyr::lag(r_N) * dplyr::lag(Bh_N))\",     \"GB_S = TX_S - (G_S + dplyr::lag(r_S) * dplyr::lag(Bh_S))\"   ) ) plot_simulation(   model = model_open, scenario = \"expansion\", from = 1, to = 50,   expressions = c(\"Y_N\", \"Y_S\") ) plot_simulation(   model = model_open, scenario = \"expansion\", from = 1, to = 50,   expressions = c(\"or_S\", \"or_N\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_OPEN.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model OPEN","text":"details OPEN model, refer Chapter 6 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/Model_PC.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model PC","text":"Start initializing empty SFC (Stock-Flow Consistent) model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, calculate baseline scenario 100 periods using Gauss method) simulation estimated, visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_pc <- create_model(name = \"SFC PC\") #> Empty model created # Add variables model_pc <- model_pc |>   add_variable(\"B_cb\", desc = \"\") |>   add_variable(\"H_s\", desc = \"\") |>   add_variable(\"B_s\", desc = \"\") |>   add_variable(\"B_h\", desc = \"\") |>   add_variable(\"H_h1\", desc = \"\") |>   add_variable(\"H_h\", desc = \"\") |>   add_variable(\"C\", desc = \"\") |>   add_variable(\"V\", desc = \"\") |>   add_variable(\"T_x\", desc = \"\") |>   add_variable(\"Y\", desc = \"Income = GDP\") |>   add_variable(\"Yd\", desc = \"Disposable income of households\") |>   add_variable(\"alpha1\", init = 0.6, desc = \"Propensity to consume out of income\") |>   add_variable(\"alpha2\", init = 0.4, desc = \"Propensity to consume out of wealth\") |>   add_variable(\"theta\", init = 0.2, desc = \"Tax rate\") |>   add_variable(\"r\", init = 0.025, desc = \"\") |>   add_variable(\"G\", init = 20, desc = \"Government demand\") |>   add_variable(\"lambda0\", init = 0.635, desc = \"\") |>   add_variable(\"lambda1\", init = 0.05, desc = \"\") |>   add_variable(\"lambda2\", init = 0.01, desc = \"\") # Add equations model_pc <- model_pc |>   add_equation(\"Y = C + G\", desc = \"\") |>   add_equation(\"Yd = Y - T_x + r[-1] * B_h[-1]\") |>   add_equation(\"T_x = theta * (Y + r[-1] * B_h[-1])\") |>   add_equation(\"V = V[-1] + (Yd - C)\") |>   add_equation(\"C = alpha1 * Yd + alpha2 * V[-1]\") |>   add_equation(\"H_h = V - B_h\") |>   add_equation(\"H_h1 = V * ((1 - lambda0) - lambda1 * r + lambda2 * ( Yd/V ))\") |>   add_equation(\"B_h = V * (lambda0 + lambda1 * r - lambda2 * ( Yd/V ))\") |>   add_equation(\"B_s = B_s[-1] + (G + r[-1] * B_s[-1]) - (T_x + r[-1] * B_cb[-1])\") |>   add_equation(\"H_s = H_s[-1] + B_cb - B_cb[-1]\") |>   add_equation(\"B_cb = B_s - B_h\") |>   add_equation(\"H_h = H_s\", hidden = T) # Simulate model model_pc <- simulate_scenario(model_pc,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_pc, scenario = c(\"baseline\"), from = 1, to = 100,   expressions = c(\"B_h / V\") ) # Plot results plot_simulation(   model = model_pc, scenario = c(\"baseline\"), from = 1, to = 100,   expressions = c(\"H_h / V\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_PC.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model PC","text":"godley package can simulate shocks affect economy (specifically, impact base scenario). example propose implement increased rate interest bills. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Finally, plot simulation outcomes:","code":"# Create empty shock shock_pc <- create_shock() #> Shock object created # Add shock equation with increased rate of interest on bills shock_pc <- add_shock(shock_pc,   variable = \"r\",   value = 0.035,   desc = \"Increase in the rate of interest on bills\",   start = 5, end = 50 ) # Create new scenario with this shock model_pc <- add_scenario(model_pc,   name = \"expansion\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_pc ) # Simulate shock model_pc <- simulate_scenario(model_pc,   scenario = \"expansion\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_pc, scenario = c(\"expansion\"), from = 1, to = 50,   expressions = c(\"B_h / V\") ) # Plot results plot_simulation(   model = model_pc, scenario = c(\"expansion\"), from = 1, to = 50,   expressions = c(\"H_h / V\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_PC.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model PC","text":"details PC model, refer Chapter 4 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/Model_PCEX.html","id":"model-pcex---random-shocks","dir":"Articles","previous_headings":"","what":"Model PCEX - random shocks","title":"Model PCEX","text":"example, expectations follow random process, modeled equation new variable “Ra,” normally distributed mean 0:Yd_e = Yd * (1 + Ra). create model, first initialize empty SFC model: , add variables model: Define relationships variables adding equations: Now, can simulate model (example, baseline scenario 100 periods using Newton method): simulation estimated, can create plot visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_pcex <- create_model(name = \"SFC PCEX\") #> Empty model created # Add variables model_pcex <- model_pcex |>   add_variable(\"B_cb\", desc = \"\") |>   add_variable(\"H_s\", desc = \"\") |>   add_variable(\"B_s\", desc = \"\") |>   add_variable(\"B_h\", desc = \"\") |>   add_variable(\"H_d1\", desc = \"\") |>   add_variable(\"H_d\", desc = \"\") |>   add_variable(\"H_h\", desc = \"\") |>   add_variable(\"C\", desc = \"\") |>   add_variable(\"V\", desc = \"\") |>   add_variable(\"T_x\", desc = \"\") |>   add_variable(\"Y\", desc = \"Income = GDP\") |>   add_variable(\"Yd\", desc = \"Disposable income of households\") |>   add_variable(\"Yd_e\") |>   add_variable(\"B_d\") |>   add_variable(\"V_e\") |>   add_variable(\"Ra\") |>   add_variable(\"alpha1\", init = 0.6, desc = \"Propensity to consume out of income\") |>   add_variable(\"alpha2\", init = 0.4, desc = \"Propensity to consume out of wealth\") |>   add_variable(\"theta\", init = 0.2, desc = \"Tax rate\") |>   add_variable(\"r\", init = 0.025, desc = \"\") |>   add_variable(\"G\", init = 20, desc = \"Government demand\") |>   add_variable(\"lambda0\", init = 0.635, desc = \"\") |>   add_variable(\"lambda1\", init = 0.05, desc = \"\") |>   add_variable(\"lambda2\", init = 0.01, desc = \"\") # Add equations model_pcex <- model_pcex |>   add_equation(\"Y = C + G\", desc = \"\") |>   add_equation(\"Yd = Y - T_x + r[-1] * B_h[-1]\") |>   add_equation(\"T_x = theta * (Y + r[-1] * B_h[-1])\") |>   add_equation(\"V = V[-1] + (Yd - C)\") |>   add_equation(\"C = alpha1 * Yd_e + alpha2 * V[-1]\") |>   add_equation(\"B_d =  V_e * lambda0 + V_e * lambda1 * r - lambda2 * Yd_e\") |>   add_equation(\"H_d1 = V_e * (1 - lambda0) - V_e * lambda1 * r + lambda2 * Yd_e\") |>   add_equation(\"H_d = V_e - B_d\") |>   add_equation(\"V_e = V[-1] + (Yd_e - C)\") |>   add_equation(\"H_h = V - B_h\") |>   add_equation(\"B_h = B_d\") |>   add_equation(\"B_s = B_s[-1] + (G + r[-1] * B_s[-1]) - (T_x + r[-1] * B_cb[-1])\") |>   add_equation(\"H_s = H_s[-1] + B_cb - B_cb[-1]\") |>   add_equation(\"B_cb = B_s - B_h\") |>   add_equation(\"Yd_e = Yd * (1 + Ra)\") |>   add_equation(\"Ra = rnorm(1, 0, 0.05)\") |>   add_equation(\"H_h = H_s\", hidden = T) # Simulate model model_pcex <- simulate_scenario(model_pcex,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_pcex, scenario = c(\"baseline\"), from = 1, to = 50,   expressions = c(\"H_h\", \"H_d\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_PCEX.html","id":"model-pcex1---adaptive-expectations","dir":"Articles","previous_headings":"","what":"Model PCEX1 - adaptive expectations","title":"Model PCEX","text":"scenario, assume expectations current disposable income based actual disposable income previous period. apply model, first create empty SFC model: Next, define relevant variables: Following , update equation expected disposable income previous example :Yd_e = Yd[-1] Now, can simulate model (example, baseline scenario 100 periods using Newton method): simulation estimated, can create plot visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_pcex1 <- create_model(name = \"SFC PCEX1\") #> Empty model created # Add variables model_pcex1 <- model_pcex1 |>   add_variable(\"B_cb\", desc = \"\") |>   add_variable(\"H_s\", desc = \"\") |>   add_variable(\"B_s\", desc = \"\") |>   add_variable(\"B_h\", desc = \"\") |>   add_variable(\"H_d1\", desc = \"\") |>   add_variable(\"H_d\", desc = \"\") |>   add_variable(\"H_h\", desc = \"\") |>   add_variable(\"C\", desc = \"\") |>   add_variable(\"V\", desc = \"\") |>   add_variable(\"T_x\", desc = \"\") |>   add_variable(\"Y\", desc = \"Income = GDP\") |>   add_variable(\"Yd\", desc = \"Disposable income of households\") |>   add_variable(\"Yd_e\") |>   add_variable(\"B_d\") |>   add_variable(\"V_e\") |>   add_variable(\"alpha1\", init = 0.6, desc = \"Propensity to consume out of income\") |>   add_variable(\"alpha2\", init = 0.4, desc = \"Propensity to consume out of wealth\") |>   add_variable(\"theta\", init = 0.2, desc = \"Tax rate\") |>   add_variable(\"r\", init = 0.025, desc = \"\") |>   add_variable(\"G\", init = 20, desc = \"Government demand\") |>   add_variable(\"lambda0\", init = 0.635, desc = \"\") |>   add_variable(\"lambda1\", init = 0.05, desc = \"\") |>   add_variable(\"lambda2\", init = 0.01, desc = \"\") # Add equations model_pcex1 <- model_pcex1 |>   add_equation(\"Y = C + G\", desc = \"\") |>   add_equation(\"Yd = Y - T_x + r[-1] * B_h[-1]\") |>   add_equation(\"T_x = theta * (Y + r[-1] * B_h[-1])\") |>   add_equation(\"V = V[-1] + (Yd - C)\") |>   add_equation(\"C = alpha1 * Yd_e + alpha2 * V[-1]\") |>   add_equation(\"B_d =  V_e * lambda0 + V_e * lambda1 * r - lambda2 * Yd_e\") |>   add_equation(\"H_d1 = V_e * (1 - lambda0) - V_e * lambda1 * r + lambda2 * Yd_e\") |>   add_equation(\"H_d = V_e - B_d\") |>   add_equation(\"V_e = V[-1] + (Yd_e - C)\") |>   add_equation(\"H_h = V - B_h\") |>   add_equation(\"B_h = B_d\") |>   add_equation(\"B_s = B_s[-1] + (G + r[-1] * B_s[-1]) - (T_x + r[-1] * B_cb[-1])\") |>   add_equation(\"H_s = H_s[-1] + B_cb - B_cb[-1]\") |>   add_equation(\"B_cb = B_s - B_h\") |>   add_equation(\"Yd_e = Yd[-1]\") |>   add_equation(\"H_h = H_s\", hidden = T) # Simulate model model_pcex1 <- simulate_scenario(model_pcex1,   scenario = \"baseline\", max_iter = 350,   periods = 100, hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_pcex1, scenario = c(\"baseline\"), from = 1, to = 50,   expressions = c(\"Y\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_PCEX.html","id":"shock---increase-in-the-propensity-to-consume-out-of-disposable-income","dir":"Articles","previous_headings":"Model PCEX1 - adaptive expectations","what":"Shock - increase in the propensity to consume out of disposable income","title":"Model PCEX","text":"Now can simulate impact economy propensity consume disposable income increases 0.7. First, create empty shock object add new equation alpha1: Now can simulatem shock scenario: Finally, results, can plot national income, evolution consumption, expected disposable income, lagged wealth.","code":"# Create empty shock shock_pcex1 <- create_shock() #> Shock object created  # Add shock equation with increased government expenditures shock_pcex1 <- add_shock(shock_pcex1,   variable = \"alpha1\",   value = 0.7,   desc = \"Increase in the propensity to consume out of disposable income\",   start = 5, end = 50 )  # Create new scenario with this shock model_pcex1 <- add_scenario(model_pcex1,   name = \"expansion\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_pcex1 ) # Simulate shock model_pcex1 <- simulate_scenario(model_pcex1,   scenario = \"expansion\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_pcex1, scenario = c(\"expansion\"), from = 1, to = 50,   expressions = c(\"Y\") ) # Plot results plot_simulation(   model = model_pcex1, scenario = c(\"expansion\"), from = 1, to = 50,   expressions = c(\"Yd_e\", \"C\", \"V\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_PCEX.html","id":"model-pcex2---where-the-propensity-to-consume-reacts-negatively-to-higher-interest-rates","dir":"Articles","previous_headings":"","what":"Model PCEX2 - where the propensity to consume reacts negatively to higher interest rates","title":"Model PCEX","text":", assume expectations regarding current disposable income based previous period’s actual disposable income, previous example. However, propensity consume now reacts negatively higher interest rates (decreases interest rates rise). apply model, need add two new variables, iota alpha10, used PCEX1, include additional equation:alpha1 = alpha10 - iota * r[-1]. begin, create empty SFC model: , define variables model: Specify relationships variables adding equations: Now, can simulate model (example, baseline scenario 100 periods using Newton method): simulation estimated, can create plot visualize outcomes variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_pcex2 <- create_model(name = \"SFC PCEX2\") #> Empty model created # Add variables model_pcex2 <- model_pcex2 |>   add_variable(\"B_cb\", desc = \"\") |>   add_variable(\"H_s\", desc = \"\") |>   add_variable(\"B_s\", desc = \"\") |>   add_variable(\"B_h\", desc = \"\") |>   add_variable(\"H_d1\", desc = \"\") |>   add_variable(\"H_d\", desc = \"\") |>   add_variable(\"H_h\", desc = \"\") |>   add_variable(\"C\", desc = \"\") |>   add_variable(\"V\", desc = \"\") |>   add_variable(\"T_x\", desc = \"\") |>   add_variable(\"Y\", desc = \"Income = GDP\") |>   add_variable(\"Yd\", desc = \"Disposable income of households\") |>   add_variable(\"Yd_e\") |>   add_variable(\"B_d\") |>   add_variable(\"V_e\") |>   add_variable(\"iota\", init = 4) |>   add_variable(\"alpha10\", init = 0.7) |>   add_variable(\"alpha1\", init = 0.6, desc = \"Propensity to consume out of income\") |>   add_variable(\"alpha2\", init = 0.4, desc = \"Propensity to consume out of wealth\") |>   add_variable(\"theta\", init = 0.2, desc = \"Tax rate\") |>   add_variable(\"r\", init = 0.025, desc = \"\") |>   add_variable(\"G\", init = 20, desc = \"Government demand\") |>   add_variable(\"lambda0\", init = 0.635, desc = \"\") |>   add_variable(\"lambda1\", init = 0.05, desc = \"\") |>   add_variable(\"lambda2\", init = 0.01, desc = \"\") # Add equations model_pcex2 <- model_pcex2 |>   add_equation(\"Y = C + G\", desc = \"\") |>   add_equation(\"Yd = Y - T_x + r[-1] * B_h[-1]\") |>   add_equation(\"T_x = theta * (Y + r[-1] * B_h[-1])\") |>   add_equation(\"V = V[-1] + (Yd - C)\") |>   add_equation(\"C = alpha1 * Yd_e + alpha2 * V[-1]\") |>   add_equation(\"B_d =  V_e * lambda0 + V_e * lambda1 * r - lambda2 * Yd_e\") |>   add_equation(\"H_d1 = V_e * (1 - lambda0) - V_e * lambda1 * r + lambda2 * Yd_e\") |>   add_equation(\"H_d = V_e - B_d\") |>   add_equation(\"V_e = V[-1] + (Yd_e - C)\") |>   add_equation(\"H_h = V - B_h\") |>   add_equation(\"B_h = B_d\") |>   add_equation(\"B_s = B_s[-1] + (G + r[-1] * B_s[-1]) - (T_x + r[-1] * B_cb[-1])\") |>   add_equation(\"H_s = H_s[-1] + B_cb - B_cb[-1]\") |>   add_equation(\"B_cb = B_s - B_h\") |>   add_equation(\"Yd_e = Yd[-1]\") |>   add_equation(\"alpha1 = alpha10 - iota * r[-1]\") |>   add_equation(\"H_h = H_s\", hidden = T) # Simulate model model_pcex2 <- simulate_scenario(model_pcex2,   scenario = \"baseline\", max_iter = 350,   periods = 100, hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_pcex2, scenario = c(\"baseline\"), from = 1, to = 50,   expressions = c(\"Y\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_PCEX.html","id":"shock---increase-in-the-rate-of-interest-on-bills","dir":"Articles","previous_headings":"Model PCEX2 - where the propensity to consume reacts negatively to higher interest rates","what":"Shock - increase in the rate of interest on bills","title":"Model PCEX","text":"Now, can simulate effects economy 100-point increase interest rate bills. start, create empty shock object add new equation r: Afterward, can simulate shock scenario: results, can visualize national income, evolution consumption, expected disposable income, lagged wealth:","code":"# Create empty shock shock_pcex2 <- create_shock() #> Shock object created  # Add shock equation with increased government expenditures shock_pcex2 <- add_shock(shock_pcex2,   variable = \"r\",   value = 0.035,   desc = \"Increase in the rate of interest on bills\",   start = 5, end = 50 )  # Create new scenario with this shock model_pcex2 <- add_scenario(model_pcex2,   name = \"expansion\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_pcex2 ) # Simulate shock model_pcex2 <- simulate_scenario(model_pcex2,   scenario = \"expansion\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_pcex2, scenario = c(\"expansion\"), from = 1, to = 50,   expressions = c(\"Y\") ) # Plot results plot_simulation(   model = model_pcex2, scenario = c(\"expansion\"),   from = 1, to = 50,   expressions = c(\"Yd\", \"C\", \"V\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_PCEX.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model PCEX","text":"details PC models expectations (PCEX), see Chapter 4 Monetary Economics: Integrated Approach Credit, Money, Income, Production, Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/Model_REG.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model REG","text":"Start creating empty SFC model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, calculate baseline scenario 100 periods using Gauss method) simulation estimated, visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_reg <- create_model(name = \"SFC REG\") #> Empty model created # Add variables model_reg <- model_reg |>   add_variable(\"r\", init = 0.025) |>   add_variable(\"G_S\", init = 20) |>   add_variable(\"G_N\", init = 20) |>   add_variable(\"mu_N\", init = 0.15) |>   add_variable(\"mu_S\", init = 0.15) |>   add_variable(\"alpha1_N\", init = 0.7) |>   add_variable(\"alpha1_S\", init = 0.7) |>   add_variable(\"alpha2_N\", init = 0.3) |>   add_variable(\"alpha2_S\", init = 0.3) |>   add_variable(\"lambda0_N\", init = 0.67) |>   add_variable(\"lambda0_S\", init = 0.67) |>   add_variable(\"lambda1_N\", init = 0.05) |>   add_variable(\"lambda1_S\", init = 0.05) |>   add_variable(\"lambda2_N\", init = 0.01) |>   add_variable(\"lambda2_S\", init = 0.01) |>   add_variable(\"theta\", init = 0.2) |>   add_variable(\"Y_N\") |>   add_variable(\"C_N\") |>   add_variable(\"X_N\") |>   add_variable(\"IM_N\") |>   add_variable(\"Y_S\") |>   add_variable(\"C_S\") |>   add_variable(\"X_S\") |>   add_variable(\"IM_S\") |>   add_variable(\"YD_N\") |>   add_variable(\"TX_N\") |>   add_variable(\"Bh_N\") |>   add_variable(\"YD_S\") |>   add_variable(\"TX_S\") |>   add_variable(\"Bh_S\") |>   add_variable(\"V_N\") |>   add_variable(\"V_S\") |>   add_variable(\"Hh_N\") |>   add_variable(\"Hh_S\") |>   add_variable(\"TX\") |>   add_variable(\"G\") |>   add_variable(\"Bh\") |>   add_variable(\"Bs\") |>   add_variable(\"Hh\") |>   add_variable(\"Hs\") |>   add_variable(\"Bcb\") # Add equations model_reg <- model_reg |>   add_equation(\"Y_N = C_N + G_N + X_N - IM_N\") |>   add_equation(\"Y_S = C_S + G_S + X_S - IM_S\") |>   add_equation(\"IM_N = mu_N * Y_N\") |>   add_equation(\"IM_S = mu_S * Y_S\") |>   add_equation(\"X_N = IM_S\") |>   add_equation(\"YD_N = Y_N - TX_N + r[-1] * Bh_N[-1]\") |>   add_equation(\"YD_S = Y_S - TX_S + r[-1] * Bh_S[-1]\") |>   add_equation(\"TX_N = theta * ( Y_N + r[-1] * Bh_N[-1])\") |>   add_equation(\"X_S = IM_N\") |>   add_equation(\"TX_S = theta * ( Y_S + r[-1] * Bh_S[-1])\") |>   add_equation(\"V_N = V_N[-1] + ( YD_N - C_N )\") |>   add_equation(\"V_S = V_S[-1] + ( YD_S - C_S )\") |>   add_equation(\"C_N = alpha1_N * YD_N + alpha2_N * V_N[-1]\") |>   add_equation(\"C_S = alpha1_S * YD_S + alpha2_S * V_S[-1]\") |>   add_equation(\"Hh_N = V_N - Bh_N\") |>   add_equation(\"Hh_S = V_S - Bh_S\") |>   add_equation(\"Bh_N = V_N * ( lambda0_N + lambda1_N * r - lambda2_N * ( YD_N/V_N ) )\") |>   add_equation(\"Bh_S = V_S * ( lambda0_S + lambda1_S * r - lambda2_S * ( YD_S/V_S ) )\") |>   add_equation(\"TX = TX_N + TX_S\") |>   add_equation(\"G = G_N + G_S\") |>   add_equation(\"Bh = Bh_N + Bh_S\") |>   add_equation(\"Hh = Hh_N + Hh_S\") |>   add_equation(\"Bs = Bs[-1] + ( G + r[-1] * Bs[-1] ) - ( TX + r[-1] * Bcb[-1] )\") |>   add_equation(\"Hs = Hs[-1] + Bcb - Bcb[-1]\") |>   add_equation(\"Bcb = Bs - Bh\") |>   add_equation(\"Hs = Hh\", desc = \"Money equilibrium\", hidden = TRUE) # Simulate model model_reg <- simulate_scenario(model_reg,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_reg, scenario = \"baseline\", from = 1, to = 50,   expressions = c(     \"deltaV_S = V_S - dplyr::lag(V_S)\",     \"GB_S = TX_S - (G_S + dplyr::lag(r) * dplyr::lag(Bh_S))\",     \"TB_S = X_S - IM_S\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/Model_REG.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model REG","text":"godley package can simulate shocks affect economy (specifically, impact base scenario).","code":""},{"path":"https://gamrot.github.io/godley/articles/Model_REG.html","id":"shock-1","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 1","title":"Model REG","text":"first example, propose introduce increase propensity import South. First, initialize empty shock object: , define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Finally, plot simulation outcomes:","code":"# Create empty shock shock_reg <- create_shock() #> Shock object created # Add shock equation with increased propensity to import of the South shock_reg <- add_shock(shock_reg,   variable = \"mu_S\",   value = 0.25,   desc = \"An increase in the propensity to import of the South\",   start = 5, end = 60 ) # Create new scenario with this shock model_reg <- add_scenario(model_reg,   name = \"expansion1\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_reg ) # Simulate shock model_reg <- simulate_scenario(model_reg,   scenario = \"expansion1\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion1 (1 of 1) #> Scenario(s) successfully simulated plot_simulation(   model = model_reg, scenario = \"expansion1\", from = 1, to = 50,   expressions = c(     \"deltaV_S = V_S - dplyr::lag(V_S)\",     \"GB_S = TX_S - (G_S + dplyr::lag(r) * dplyr::lag(Bh_S))\",     \"TB_S = X_S - IM_S\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/Model_REG.html","id":"shock-2","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 2","title":"Model REG","text":"Another example implements increase government expenditures South. First, initialize empty shock object: Add appropriate equation: Integrate shock model creating new scenario: Simulate model shock applied: Visualize results shock scenario:","code":"# Create empty shock shock_reg <- create_shock() #> Shock object created # Add shock equation with increased government expenditures of the South shock_reg <- add_shock(shock_reg,   variable = \"G_S\",   value = 25,   desc = \"An increase of government expenditures of the South\",   start = 5, end = 50 ) # Create new scenario with this shock model_reg <- add_scenario(model_reg,   name = \"expansion2\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_reg ) # Simulate shock model_reg <- simulate_scenario(model_reg,   scenario = \"expansion2\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion2 (1 of 1) #> Scenario(s) successfully simulated plot_simulation(   model = model_reg, scenario = \"expansion2\", from = 1, to = 50,   expressions = c(     \"deltaV_S = V_S - dplyr::lag(V_S)\",     \"GB_S = TX_S - (G_S + dplyr::lag(r) * dplyr::lag(Bh_S))\",     \"TB_S = X_S - IM_S\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/Model_REG.html","id":"shock-3","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 3","title":"Model REG","text":"final example, suggest applying increase propensity save among Southern households. First, initialize empty shock: Add appropriate equation: Integrate shock model creating new scenario: Run simulation shock applied: Finally, plot simulation outcomes:","code":"# Create empty shock shock_reg <- create_shock() #> Shock object created # Add shock equation with increased government expenditures of the South shock_reg <- add_shock(shock_reg,   variable = \"alpha1_S\",   value = .6,   desc = \"Increased propensity to save of the Southern households\",   start = 5, end = 50 ) # Create new scenario with this shock model_reg <- add_scenario(model_reg,   name = \"expansion3\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = shock_reg ) # Simulate shock model_reg <- simulate_scenario(model_reg,   scenario = \"expansion3\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion3 (1 of 1) #> Scenario(s) successfully simulated plot_simulation(   model = model_reg, scenario = \"expansion3\", from = 1, to = 50,   expressions = c(     \"deltaV_S = V_S - dplyr::lag(V_S)\",     \"GB_S = TX_S - (G_S + dplyr::lag(r) * dplyr::lag(Bh_S))\",     \"TB_S = X_S - IM_S\"   ) )"},{"path":"https://gamrot.github.io/godley/articles/Model_REG.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model REG","text":"details REG model, refer Chapter 6 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/Model_SIM.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model SIM","text":"Start initializing empty SFC (Stock-Flow Consistent) model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, calculate baseline scenario 100 periods using Newton method) simulation estimated, visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_sim <- create_model(name = \"SFC SIM\") #> Empty model created # Add variables model_sim <- model_sim |>   add_variable(\"C_d\", desc = \"Consumption demand by households\") |>   add_variable(\"C_s\", desc = \"Consumption supply\") |>   add_variable(\"G_s\", desc = \"Government supply\") |>   add_variable(\"H_h\", desc = \"Cash money held by households\") |>   add_variable(\"H_s\", desc = \"Cash money supplied by the government\") |>   add_variable(\"N_d\", desc = \"Demand for labor\") |>   add_variable(\"N_s\", desc = \"Supply of labor\") |>   add_variable(\"T_d\", desc = \"Taxes, demand\") |>   add_variable(\"T_s\", desc = \"Taxes, supply\") |>   add_variable(\"Y\", desc = \"Income = GDP\") |>   add_variable(\"Yd\", desc = \"Disposable income of households\") |>   add_variable(\"alpha1\", init = 0.6, desc = \"Propensity to consume out of income\") |>   add_variable(\"alpha2\", init = 0.4, desc = \"Propensity to consume out of wealth\") |>   add_variable(\"theta\", init = 0.2, desc = \"Tax rate\") |>   add_variable(\"G_d\", init = 20, desc = \"Government demand\") |>   add_variable(\"W\", init = 1, desc = \"Wage rate\") # Add equations model_sim <- model_sim |>   add_equation(\"C_s = C_d\", desc = \"Consumption\") |>   add_equation(\"G_s = G_d\") |>   add_equation(\"T_s = T_d\") |>   add_equation(\"N_s = N_d\") |>   add_equation(\"Yd = W * N_s - T_s\") |>   add_equation(\"T_d = theta * W * N_s\") |>   add_equation(\"C_d = alpha1 * Yd + alpha2 * H_h[-1]\") |>   add_equation(\"H_s = G_d - T_d + H_s[-1]\") |>   add_equation(\"H_h = Yd - C_d + H_h[-1]\") |>   add_equation(\"Y = C_s + G_s\") |>   add_equation(\"N_d = Y/W\") |>   add_equation(\"H_s = H_h\", desc = \"Money equilibrium\", hidden = TRUE) # Simulate model model_sim <- simulate_scenario(model_sim,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-05, method = \"Newton\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_sim, scenario = c(\"baseline\"), from = 1, to = 50,   expressions = c(\"Y\", \"C_d\", \"G_s\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_SIM.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model SIM","text":"godley package can simulate shocks affect economy (specifically, impact base scenario). example, apply permanent increase government expenditures. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Finally, compare results base scenario shock scenario.","code":"# Create empty shock shock_sim <- create_shock() #> Shock object created # Add shock equation with increased government expenditures shock_sim <- add_shock(shock_sim,   variable = \"G_d\",   value = 25,   desc = \"Increase in government expenditures\", start = 5, end = 50 ) # Create new scenario with this shock model_sim <- add_scenario(model_sim,   name = \"expansion\", origin = \"baseline\", shock = shock_sim ) # Simulate shock model_sim <- simulate_scenario(model_sim,   scenario = \"expansion\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-05, method = \"Newton\" ) #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_sim, scenario = c(\"baseline\", \"expansion\"), from = 1, to = 50,   expressions = c(\"Y\") ) plot_simulation(   model = model_sim, scenario = c(\"baseline\", \"expansion\"), from = 1, to = 50,   expressions = c(\"C_d\") ) plot_simulation(   model = model_sim, scenario = c(\"baseline\", \"expansion\"), from = 1, to = 50,   expressions = c(\"G_s\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_SIM.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model SIM","text":"details SIM model, refer Chapter 3 Monetary Economics: Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/Model_SIMEX.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model SIMEX","text":"Start initializing empty SFC (Stock-Flow Consistent) model: Define variables model: Establish relationships variables adding equations: Now, can simulate model (example, calculate baseline scenario 100 periods using Newton method) simulation estimated, visualize results variables interest: Note: example uses new pipe operator (|>), requires R 4.1 later.","code":"# Create empty model model_simex <- create_model(name = \"SFC SIMEX\") #> Empty model created # Add variables model_simex <- model_simex |>   add_variable(\"C_d\", desc = \"Consumption demand by households\") |>   add_variable(\"C_s\", desc = \"Consumption supply\") |>   add_variable(\"G_s\", desc = \"Government supply\") |>   add_variable(\"T_d\", desc = \"Taxes, demand\") |>   add_variable(\"T_s\", desc = \"Taxes, supply\") |>   add_variable(\"N_d\", desc = \"Demand for labor\") |>   add_variable(\"N_s\", desc = \"Supply of labor\") |>   add_variable(\"H_h\", desc = \"Cash money held by households\") |>   add_variable(\"H_s\", desc = \"Cash money supplied by the government\") |>   add_variable(\"H_d\", desc = \"Cash money demanded by the government\") |>   add_variable(\"Y\", desc = \"Income = GDP\") |>   add_variable(\"Yd\", desc = \"Disposable income of households\") |>   add_variable(\"Yd_e\", desc = \"Expected disposable income of households\") |>   add_variable(\"alpha1\", init = 0.6, desc = \"Propensity to consume out of income\") |>   add_variable(\"alpha2\", init = 0.4, desc = \"Propensity to consume out of wealth\") |>   add_variable(\"theta\", init = 0.2, desc = \"Tax rate\") |>   add_variable(\"G_d\", init = 20, desc = \"Government demand\") |>   add_variable(\"W\", init = 1, desc = \"Wage rate\") # Add equations model_simex <- model_simex |>   add_equation(\"C_s = C_d\", desc = \"Consumption\") |>   add_equation(\"G_s = G_d\") |>   add_equation(\"T_s = T_d\") |>   add_equation(\"N_s = N_d\") |>   add_equation(\"Yd = W * N_s - T_s\") |>   add_equation(\"T_d = theta * W * N_s\") |>   add_equation(\"C_d = alpha1 * Yd_e + alpha2 * H_h[-1]\") |>   add_equation(\"H_s = G_d - T_d + H_s[-1]\") |>   add_equation(\"H_h = Yd - C_d + H_h[-1]\") |>   add_equation(\"Y = C_s + G_s\") |>   add_equation(\"N_d = Y/W\") |>   add_equation(\"H_d = Yd_e - C_d + H_h[-1]\") |>   add_equation(\"Yd_e = Yd[-1]\") |>   add_equation(\"H_s = H_h\", desc = \"Money equilibrium\", hidden = TRUE) # Simulate model model_simex <- simulate_scenario(model_simex,   scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-05, method = \"Newton\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_simex, scenario = c(\"baseline\"), from = 1, to = 50,   expressions = c(\"Y\", \"C_d\", \"C_s / alpha1\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_SIMEX.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model SIMEX","text":"godley package can simulate shocks affect economy (specifically, impact base scenario). example, introduce increase government expenditures. First, initialize empty shock object: Define shock adding appropriate equation: Integrate shock model creating new scenario: Simulate scenario shock applied: Finally, plot simulation outcomes:","code":"# Create empty shock shock_simex <- create_shock() #> Shock object created # Add shock equation with increased government expenditures shock_simex <- add_shock(shock_simex,   variable = \"G_d\", value = 25,   desc = \"Increase in government expenditures\", start = 5, end = 50 ) # Create new scenario with this shock model_simex <- add_scenario(model_simex,   name = \"expansion\", origin = \"baseline\", shock = shock_simex ) # Simulate shock model_simex <- simulate_scenario(model_simex,   scenario = \"expansion\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Newton\" ) #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(   model = model_simex, scenario = c(\"expansion\"), from = 1, to = 50,   expressions = c(\"Y\", \"C_d\", \"C_s / alpha1\") )"},{"path":"https://gamrot.github.io/godley/articles/Model_SIMEX.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model SIMEX","text":"details SIMEX model, refer Chapter 3 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/package_outline.html","id":"scenario-simulation","dir":"Articles","previous_headings":"","what":"Scenario Simulation","title":"godley — package outline","text":"steps follow order create simulate baseline scenario.","code":""},{"path":"https://gamrot.github.io/godley/articles/package_outline.html","id":"model-creation","dir":"Articles","previous_headings":"Scenario Simulation","what":"1. Model creation","title":"godley — package outline","text":"Use create_model() function create SFC model (SFC object): Arguments: name: Model name (required). template: Name model template upload (optional). Note: Users can bypass manually adding variables equations (steps 2 3 ) uploading model attributes pre-defined templates included package. Available templates : SIM, SIMEX, PC, LP, REG, OPEN, BMW, BMWK, DIS, DISINF.","code":"library(godley) model_sim <- create_model(name = \"SFC model\") #> Empty model created"},{"path":"https://gamrot.github.io/godley/articles/package_outline.html","id":"adding-variables","dir":"Articles","previous_headings":"Scenario Simulation","what":"2. Adding variables","title":"godley — package outline","text":"Use add_variable() function add variables model, creating new entries SFC tibble: Arguments: model: name model (required). name: name variable (required). init: initial value variable (optional). desc: description variable (optional).","code":"# Add parameters model_sim <- add_variable(model = model_sim, name = \"C_d\", desc = \"Consumption demand by households\") model_sim <- add_variable(model = model_sim, name = \"C_s\", desc = \"Consumption supply\") model_sim <- add_variable(model = model_sim, name = \"G_s\", desc = \"Government supply\") model_sim <- add_variable(model = model_sim, name = \"H_h\", desc = \"Cash money held by households\") model_sim <- add_variable(   model = model_sim, name = \"H_s\",   desc = \"Cash money supplied by the government\" ) model_sim <- add_variable(model = model_sim, name = \"N_d\", desc = \"Demand for labor\") model_sim <- add_variable(model = model_sim, name = \"N_s\", desc = \"Supply of labor\") model_sim <- add_variable(model = model_sim, name = \"T_d\", desc = \"Taxes, demand\") model_sim <- add_variable(model = model_sim, name = \"T_s\", desc = \"Taxes, supply\") model_sim <- add_variable(model = model_sim, name = \"Y\", desc = \"Income = GDP\") model_sim <- add_variable(model = model_sim, name = \"Yd\", desc = \"Disposable income of households\") model_sim <- add_variable(   model = model_sim, name = \"alpha1\", init = 0.6,   desc = \"Propensity to consume out of income\" ) model_sim <- add_variable(   model = model_sim, name = \"alpha2\", init = 0.4,   desc = \"Propensity to consume out of wealth\" ) model_sim <- add_variable(model = model_sim, name = \"theta\", init = 0.2, desc = \"Tax rate\") model_sim <- add_variable(model = model_sim, name = \"G_d\", init = 20, desc = \"Government demand\") model_sim <- add_variable(model = model_sim, name = \"W\", init = 1, desc = \"Wage rate\")"},{"path":"https://gamrot.github.io/godley/articles/package_outline.html","id":"adding-equations","dir":"Articles","previous_headings":"Scenario Simulation","what":"3. Adding equations","title":"godley — package outline","text":"add equations SFC model, also new entries SFC tibble, use add_equation() function: Arguments: model: name model (required). equation: formula equation (required). desc: description equation (optional). hidden: boolean indicating whether equation hidden (optional). Hidden equations excluded simulation.","code":"# Add equations model_sim <- add_equation(model = model_sim, equation = \"C_s = C_d\", desc = \"Consumption\") model_sim <- add_equation(model = model_sim, equation = \"G_s = G_d\") model_sim <- add_equation(model = model_sim, equation = \"T_s = T_d\") model_sim <- add_equation(model = model_sim, equation = \"N_s = N_d\") model_sim <- add_equation(model = model_sim, equation = \"Yd = W * N_s - T_s\") model_sim <- add_equation(model = model_sim, equation = \"T_d = theta * W * N_s\") model_sim <- add_equation(model = model_sim, equation = \"C_d = alpha1 * Yd + alpha2 * H_h[-1]\") model_sim <- add_equation(model = model_sim, equation = \"H_s = G_d - T_d + H_s[-1]\") model_sim <- add_equation(model = model_sim, equation = \"H_h = Yd - C_d + H_h[-1]\") model_sim <- add_equation(model = model_sim, equation = \"Y = C_s + G_s\") model_sim <- add_equation(model = model_sim, equation = \"N_d = Y/W\") model_sim <- add_equation(   model = model_sim, equation = \"H_s = H_h\", desc = \"Money equilibrium\",   hidden = TRUE )"},{"path":"https://gamrot.github.io/godley/articles/package_outline.html","id":"change-initial-values-optional","dir":"Articles","previous_headings":"Scenario Simulation","what":"4. Change initial values (optional)","title":"godley — package outline","text":"change initial values parameters, use change_init() function: Arguments: model: name model (required). name: name parameter (required). value: new initial value parameter (required).","code":"# Change initial value for alpha1 parameter model_sim <- change_init(model = model_sim, name = \"alpha1\", value = 0.5) #> Changed alpha1 initial value to 0.5"},{"path":"https://gamrot.github.io/godley/articles/package_outline.html","id":"simulating-scenarios","dir":"Articles","previous_headings":"Scenario Simulation","what":"5. Simulating scenario(s)","title":"godley — package outline","text":"Use simulate_scenario() function carry simulation specified scenarios: Arguments: model: name SFC model (required). scenario: name scenario simulated (optional). max_iter: maximum number iterations simulation (optional). periods: number simulation periods (optional). hidden_tol: maximum allowable error hidden equations (optional). tol: maximum allowable error algorithm converge simulation (optional). method: calculation method used ('Newton' 'Gauss') (optional). Note: scenario name provided simulated scenarios calculated.","code":"# Simulate baseline scenario model_sim <- simulate_scenario(   model = model_sim, scenario = \"baseline\", max_iter = 350, periods = 100,   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\" ) #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated"},{"path":"https://gamrot.github.io/godley/articles/package_outline.html","id":"model-plots","dir":"Articles","previous_headings":"","what":"Model — Plots","title":"godley — package outline","text":"visualize model simulation, use plot_simulation() function shown : Arguments: model: name SFC model displayed chart (required). scenario: name scenario(s) include chart (optional). take_all: boolean indicating whether scenarios containing specified scenario name strings displayed chart (optional). : starting period displayed chart (optional). : ending period displayed chart (optional). expressions: variable names equations visualize chart (optional).","code":"# Plot results plot_simulation(   model = model_sim, scenario = \"baseline\", from = 1, to = 100,   expressions = c(\"Y\", \"C_s / alpha1\") )"},{"path":"https://gamrot.github.io/godley/articles/package_outline.html","id":"model-shock","dir":"Articles","previous_headings":"","what":"Model — Shock","title":"godley — package outline","text":"create simulate shock scenario, follow steps:","code":""},{"path":"https://gamrot.github.io/godley/articles/package_outline.html","id":"creating-shock-object","dir":"Articles","previous_headings":"Model — Shock","what":"1. Creating shock object","title":"godley — package outline","text":"Use create_shock() function create SFC shock tibble object:","code":"# Create shock sim_shock <- create_shock() #> Shock object created"},{"path":"https://gamrot.github.io/godley/articles/package_outline.html","id":"adding-shock-equations","dir":"Articles","previous_headings":"Model — Shock","what":"2. Adding shock equations","title":"godley — package outline","text":"Use add_shock() function add shock equations SFC shock object: Arguments: shock: name shock object new equation added (required). equation: (new) equation describing applied shock (required). desc: description applied shock (optional). start: initial period shock applied (optional). end: final period shock applied (optional). Note: ‘start’ ‘end’ parameters set default NA, default shock applied whole simulation period","code":"# Add shock equation for increased government expenditures sim_shock <- add_shock(   shock = sim_shock,   variable = \"G_d\",   value = 25,   desc = \"Increase in government expenditures\", start = 5, end = 10 )"},{"path":"https://gamrot.github.io/godley/articles/package_outline.html","id":"adding-shock-scenario-to-the-sfc-model","dir":"Articles","previous_headings":"Model — Shock","what":"3. Adding shock scenario to the SFC model","title":"godley — package outline","text":"Use add_scenario() function integrate shock scenario SFC model: Arguments: model: name model new scenario added (required). name: name new scenario (optional). origin: name baseline scenario use reference (optional). origin_start: period baseline scenario used initial period new scenario (optional). origin_end: period baseline scenario used final period new scenario (optional). shock: name created SFC shock object applied (required).","code":"# Add shock scenario for increased government expenditures model_sim <- add_scenario(   model = model_sim, name = \"expansion\", origin = \"baseline\",   origin_start = 1,   origin_end = 100,   shock = sim_shock )"},{"path":"https://gamrot.github.io/godley/articles/package_outline.html","id":"simulating-shock-scenario","dir":"Articles","previous_headings":"Model — Shock","what":"4. Simulating shock scenario","title":"godley — package outline","text":"Use simulate_scenario() function simulate shock scenario:","code":"# Calculate shock scenario for increased government expenditures model_sim <- simulate_scenario(   model = model_sim, max_iter = 350, periods = 100, hidden_tol = 0.1,   tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated"},{"path":"https://gamrot.github.io/godley/articles/package_outline.html","id":"model-sensitivity","dir":"Articles","previous_headings":"","what":"Model — sensitivity","title":"godley — package outline","text":"Sensitivity analysis allows creation multiple scenarios separate SFC model changing initial value selected variable. create simulate sensitivity, use create_sensitivity() simulate_scenario() functions shown : Arguments: model_pass: name SFC model scenario template used sensitivity calculation (required). variable: name variable analyzed sensitivity calculation (required). lower: minimum value variable sensitivity calculation (optional). upper: maximum value variable sensitivity calculation (optional). step: increment variable change sensitivity analysis (optional).","code":"# Create and calculate sensitivity model_sen <- create_sensitivity(   model_pass = model_sim, variable = \"alpha1\",   lower = 0.1, upper = 0.8, step = 0.1 ) #> Model loaded from environment #> Model prepared successfully  model_sen <- simulate_scenario(   model = model_sen, max_iter = 350, periods = 100, hidden_tol = 0.1,   tol = 1e-08, method = \"Gauss\" ) #> Simulating scenario baseline (1 of 9) #> Simulating scenario sensitivity_alpha1_0.1 (2 of 9) #> Simulating scenario sensitivity_alpha1_0.2 (3 of 9) #> Simulating scenario sensitivity_alpha1_0.3 (4 of 9) #> Simulating scenario sensitivity_alpha1_0.4 (5 of 9) #> Simulating scenario sensitivity_alpha1_0.5 (6 of 9) #> Simulating scenario sensitivity_alpha1_0.6 (7 of 9) #> Simulating scenario sensitivity_alpha1_0.7 (8 of 9) #> Simulating scenario sensitivity_alpha1_0.8 (9 of 9) #> Scenario(s) successfully simulated"},{"path":"https://gamrot.github.io/godley/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michał Gamrot. Author, copyright holder. Iwo Augustyński. Contributor. Julian Kacprzak. Contributor. Elżbieta Jowik. Maintainer, contributor.","code":""},{"path":"https://gamrot.github.io/godley/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gamrot M (2025). godley: Stock-Flow-Consistent Model Simulator. R package version 0.2.0.","code":"@Manual{,   title = {godley: Stock-Flow-Consistent Model Simulator},   author = {Michał Gamrot},   year = {2025},   note = {R package version 0.2.0}, }"},{"path":"https://gamrot.github.io/godley/reference/add_equation.html","id":null,"dir":"Reference","previous_headings":"","what":"Add equations to the model — add_equation","title":"Add equations to the model — add_equation","text":"Add equations model","code":""},{"path":"https://gamrot.github.io/godley/reference/add_equation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add equations to the model — add_equation","text":"","code":"add_equation(model, ...)"},{"path":"https://gamrot.github.io/godley/reference/add_equation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add equations to the model — add_equation","text":"model SFC model object ... additional arguments passed function.","code":""},{"path":"https://gamrot.github.io/godley/reference/add_equation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add equations to the model — add_equation","text":"updated SFC model object containing added equation","code":""},{"path":"https://gamrot.github.io/godley/reference/add_equation_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Add single equation to the model — add_equation_single","title":"Add single equation to the model — add_equation_single","text":"helper add_equation()","code":""},{"path":"https://gamrot.github.io/godley/reference/add_equation_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add single equation to the model — add_equation_single","text":"","code":"add_equation_single(model, equation, hidden = FALSE, desc = \"\")"},{"path":"https://gamrot.github.io/godley/reference/add_equation_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add single equation to the model — add_equation_single","text":"model SFC model object equation string equation format: 'x = y + z - * b + (c + d) / e + f[-1]' hidden logical, indicates equation written hidden, defaults FALSE desc string equation description","code":""},{"path":"https://gamrot.github.io/godley/reference/add_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Add scenario to the model — add_scenario","title":"Add scenario to the model — add_scenario","text":"Add scenario model","code":""},{"path":"https://gamrot.github.io/godley/reference/add_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add scenario to the model — add_scenario","text":"","code":"add_scenario(   model,   name = \"expansion\",   origin = \"baseline\",   origin_start = NA,   origin_end = NA,   shock )"},{"path":"https://gamrot.github.io/godley/reference/add_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add scenario to the model — add_scenario","text":"model SFC model object name string name scenario, defaults 'expansion' origin string name origin scenario, new scenario created, defaults 'baseline' origin_start numeric period number origin scenario new scenario begin origin_end numeric period number origin scenario new scenario end shock shock object create_shock() add_shock()","code":""},{"path":"https://gamrot.github.io/godley/reference/add_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add scenario to the model — add_scenario","text":"updated SFC model object containing added scenario","code":""},{"path":"https://gamrot.github.io/godley/reference/add_shock.html","id":null,"dir":"Reference","previous_headings":"","what":"Add shock to shock object — add_shock","title":"Add shock to shock object — add_shock","text":"Add shock shock object","code":""},{"path":"https://gamrot.github.io/godley/reference/add_shock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add shock to shock object — add_shock","text":"","code":"add_shock(   shock,   variable,   value = NA,   rate = NA,   absolute = NA,   start = NA,   end = NA,   desc = \"\" )"},{"path":"https://gamrot.github.io/godley/reference/add_shock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add shock to shock object — add_shock","text":"shock tibble create_shock() variable string variable name value numeric, explicit value values variable, extended last value rate numeric, multiplier influence original value variable absolute numeric, absolute value influence original value variable start numeric date period number shock take place, defaults NA end numeric date period number shock take place, defaults NA desc string variable description","code":""},{"path":"https://gamrot.github.io/godley/reference/add_shock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add shock to shock object — add_shock","text":"updated shock object containing added shock","code":""},{"path":"https://gamrot.github.io/godley/reference/add_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Add variables to the model — add_variable","title":"Add variables to the model — add_variable","text":"Add variables model","code":""},{"path":"https://gamrot.github.io/godley/reference/add_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add variables to the model — add_variable","text":"","code":"add_variable(model, ...)"},{"path":"https://gamrot.github.io/godley/reference/add_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add variables to the model — add_variable","text":"model SFC model object ... additional arguments passed function.","code":""},{"path":"https://gamrot.github.io/godley/reference/add_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add variables to the model — add_variable","text":"updated SFC model object containing added variable","code":""},{"path":"https://gamrot.github.io/godley/reference/add_variable_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Add single variable to the model — add_variable_single","title":"Add single variable to the model — add_variable_single","text":"helper add_variable()","code":""},{"path":"https://gamrot.github.io/godley/reference/add_variable_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add single variable to the model — add_variable_single","text":"","code":"add_variable_single(model, name, init = NA, desc = \"\")"},{"path":"https://gamrot.github.io/godley/reference/add_variable_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add single variable to the model — add_variable_single","text":"model SFC model object name string name added variable init numeric initial value, defaults 1e-05 desc string variable description","code":""},{"path":"https://gamrot.github.io/godley/reference/change_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Change initial value of a variable — change_init","title":"Change initial value of a variable — change_init","text":"Change initial value variable","code":""},{"path":"https://gamrot.github.io/godley/reference/change_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change initial value of a variable — change_init","text":"","code":"change_init(model, name, value)"},{"path":"https://gamrot.github.io/godley/reference/change_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change initial value of a variable — change_init","text":"model SFC model object name string variable name value numeric value replace existing initial value","code":""},{"path":"https://gamrot.github.io/godley/reference/change_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change initial value of a variable — change_init","text":"updated SFC model object new variable initial value","code":""},{"path":"https://gamrot.github.io/godley/reference/check_parentheses_balance.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify if parentheses in the equation are properly balanced — check_parentheses_balance","title":"Verify if parentheses in the equation are properly balanced — check_parentheses_balance","text":"function checks parentheses given equation string correctly paired balanced. parentheses, equation considered trivially balanced. returns `TRUE` parentheses balanced `FALSE` otherwise.","code":""},{"path":"https://gamrot.github.io/godley/reference/check_parentheses_balance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify if parentheses in the equation are properly balanced — check_parentheses_balance","text":"","code":"check_parentheses_balance(eq)"},{"path":"https://gamrot.github.io/godley/reference/check_parentheses_balance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify if parentheses in the equation are properly balanced — check_parentheses_balance","text":"eq character string representing equation.","code":""},{"path":"https://gamrot.github.io/godley/reference/check_parentheses_balance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify if parentheses in the equation are properly balanced — check_parentheses_balance","text":"logical value indicating whether parentheses balanced (`TRUE`) (`FALSE`).","code":""},{"path":"https://gamrot.github.io/godley/reference/create_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SFC model object — create_model","title":"Create SFC model object — create_model","text":"Create SFC model object","code":""},{"path":"https://gamrot.github.io/godley/reference/create_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SFC model object — create_model","text":"","code":"create_model(name = \"SFC model\", template)"},{"path":"https://gamrot.github.io/godley/reference/create_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SFC model object — create_model","text":"name string name created SFC model object template string name model template chosen : 'SIM', 'PC', 'LP', 'REG', 'OPEN', 'BMW', 'BMWK', 'DIS', 'DISINF', 'SIMEX', 'PCEX' user created SFC model object used template","code":""},{"path":"https://gamrot.github.io/godley/reference/create_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create SFC model object — create_model","text":"SFC model object","code":""},{"path":"https://gamrot.github.io/godley/reference/create_sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Create model with sensitivity scenarios — create_sensitivity","title":"Create model with sensitivity scenarios — create_sensitivity","text":"Create model sensitivity scenarios","code":""},{"path":"https://gamrot.github.io/godley/reference/create_sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create model with sensitivity scenarios — create_sensitivity","text":"","code":"create_sensitivity(model_pass, variable, lower = 0, upper = 1, step = 0.1)"},{"path":"https://gamrot.github.io/godley/reference/create_sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create model with sensitivity scenarios — create_sensitivity","text":"model_pass SFC model object used baseline sensitivity calculation variable string name variable used lower numeric lower bound value variable upper numeric upper bound value variable step numeric step upper lower bounds variable take value","code":""},{"path":"https://gamrot.github.io/godley/reference/create_sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create model with sensitivity scenarios — create_sensitivity","text":"SFC model object sensitivity scenarios","code":""},{"path":"https://gamrot.github.io/godley/reference/create_shock.html","id":null,"dir":"Reference","previous_headings":"","what":"Create shock used in add_scenario(). — create_shock","title":"Create shock used in add_scenario(). — create_shock","text":"Create shock used add_scenario().","code":""},{"path":"https://gamrot.github.io/godley/reference/create_shock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create shock used in add_scenario(). — create_shock","text":"","code":"create_shock()"},{"path":"https://gamrot.github.io/godley/reference/create_shock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create shock used in add_scenario(). — create_shock","text":"shock object","code":""},{"path":"https://gamrot.github.io/godley/reference/d.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate 1 order lag difference of a variable in model — d","title":"Calculate 1 order lag difference of a variable in model — d","text":"Calculate 1 order lag difference variable model","code":""},{"path":"https://gamrot.github.io/godley/reference/d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate 1 order lag difference of a variable in model — d","text":"","code":"d(x)"},{"path":"https://gamrot.github.io/godley/reference/d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate 1 order lag difference of a variable in model — d","text":"x variable name","code":""},{"path":"https://gamrot.github.io/godley/reference/d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate 1 order lag difference of a variable in model — d","text":"difference","code":""},{"path":"https://gamrot.github.io/godley/reference/d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate 1 order lag difference of a variable in model — d","text":"special function used exclusively model equation strings e.g. \"x = d(y) + z\"","code":""},{"path":"https://gamrot.github.io/godley/reference/plot_cycles.html","id":null,"dir":"Reference","previous_headings":"","what":"Network plot of the model — plot_cycles","title":"Network plot of the model — plot_cycles","text":"Network plot model","code":""},{"path":"https://gamrot.github.io/godley/reference/plot_cycles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network plot of the model — plot_cycles","text":"","code":"plot_cycles(model, save_file = NULL)"},{"path":"https://gamrot.github.io/godley/reference/plot_cycles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network plot of the model — plot_cycles","text":"model SFC model object created create_model save_file name path save plot html file","code":""},{"path":"https://gamrot.github.io/godley/reference/plot_cycles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network plot of the model — plot_cycles","text":"visNetwork object","code":""},{"path":"https://gamrot.github.io/godley/reference/plot_cycles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Network plot of the model — plot_cycles","text":"function creates representation model directed graph. Additionally shows cycles model including lagged variables. Graph can saved html file.","code":""},{"path":"https://gamrot.github.io/godley/reference/plot_cycles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network plot of the model — plot_cycles","text":"","code":"model <- godley::create_model(name = \"SFC model\", template = \"BMW\") #> Model BMW loaded from template plot_cycles(model) #> Model prepared successfully  {\"x\":{\"nodes\":{\"id\":[\"Cs\",\"Is\",\"Ns\",\"Ls\",\"Y\",\"WBd\",\"AF\",\"Ld\",\"YD\",\"Mh\",\"Ms\",\"rm\",\"WBs\",\"Nd\",\"W\",\"Cd\",\"K\",\"DA\",\"KT\",\"Id\"],\"title\":[\"Cs\",\"Is\",\"Ns\",\"Ls\",\"Y\",\"WBd\",\"AF\",\"Ld\",\"YD\",\"Mh\",\"Ms\",\"rm\",\"WBs\",\"Nd\",\"W\",\"Cd\",\"K\",\"DA\",\"KT\",\"Id\"],\"group\":[\"A\",\"X\",\"A\",\"X\",\"A\",\"A\",\"X\",\"X\",\"A\",\"X\",\"X\",\"X\",\"A\",\"A\",\"A\",\"A\",\"X\",\"X\",\"X\",\"X\"],\"color\":[\"#1f77b4\",\"#ff7f0e\",\"#1f77b4\",\"#ff7f0e\",\"#1f77b4\",\"#1f77b4\",\"#ff7f0e\",\"#ff7f0e\",\"#1f77b4\",\"#ff7f0e\",\"#ff7f0e\",\"#ff7f0e\",\"#1f77b4\",\"#1f77b4\",\"#1f77b4\",\"#1f77b4\",\"#ff7f0e\",\"#ff7f0e\",\"#ff7f0e\",\"#ff7f0e\"],\"value\":[10,10,10,10,20,15,10,15,15,10,5,0,15,15,15,15,10,10,5,25],\"label\":[\"Cs\",\"Is\",\"Ns\",\"Ls\",\"Y\",\"WBd\",\"AF\",\"Ld\",\"YD\",\"Mh\",\"Ms\",\"rm\",\"WBs\",\"Nd\",\"W\",\"Cd\",\"K\",\"DA\",\"KT\",\"Id\"]},\"edges\":{\"from\":[\"Cs\",\"Is\",\"Ns\",\"Ls\",\"Y\",\"Y\",\"WBd\",\"WBd\",\"Ld\",\"Ld\",\"YD\",\"Mh\",\"Mh\",\"Ms\",\"WBs\",\"WBs\",\"Nd\",\"W\",\"W\",\"Cd\",\"K\",\"K\",\"Id\",\"Id\"],\"to\":[\"Cd\",\"Id\",\"Nd\",\"Ld\",\"Cs\",\"Is\",\"Y\",\"AF\",\"AF\",\"Id\",\"WBs\",\"YD\",\"Cd\",\"Ls\",\"Ns\",\"W\",\"Y\",\"WBd\",\"Nd\",\"YD\",\"DA\",\"Id\",\"DA\",\"KT\"],\"arrows\":[\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\",\"from\"],\"smooth\":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\"color\":[\"gray\",\"black\",\"gray\",\"black\",\"gray\",\"black\",\"gray\",\"black\",\"gray\",\"black\",\"gray\",\"black\",\"gray\",\"black\",\"gray\",\"black\",\"gray\",\"black\",\"gray\",\"black\",\"gray\",\"black\",\"gray\",\"black\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"color\":{\"background\":\"#0085AF\",\"border\":\"#013848\",\"highlight\":\"#FF8000\"},\"shadow\":{\"enabled\":true,\"size\":10}},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":true},\"interaction\":{\"hover\":true,\"zoomSpeed\":1},\"layout\":{\"randomSeed\":42,\"improvedLayout\":true}},\"groups\":[\"A\",\"X\"],\"width\":\"100%\",\"height\":\"800px\",\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":null,\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\",\"highlight\":{\"enabled\":true,\"hoverNearest\":true,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://gamrot.github.io/godley/reference/plot_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot simulations of multiple variables in multiple scenarios — plot_simulation","title":"Plot simulations of multiple variables in multiple scenarios — plot_simulation","text":"Plot simulations multiple variables multiple scenarios","code":""},{"path":"https://gamrot.github.io/godley/reference/plot_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot simulations of multiple variables in multiple scenarios — plot_simulation","text":"","code":"plot_simulation(   model,   scenario = \"baseline\",   take_all = FALSE,   from = NA,   to = NA,   expressions = \"Y\" )"},{"path":"https://gamrot.github.io/godley/reference/plot_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot simulations of multiple variables in multiple scenarios — plot_simulation","text":"model SFC model object scenario vector strings single string name scenario(s) take variables values, defaults 'baseline' take_all logical indicating whether scenarios containing given scenario name string(s) used, defaults FALSE numeric period number plot start, defaults maximum value numeric period number plot end, defaults minimum value expressions vector strings single string name variable(s) expression(s) plot, defaults 'Y'","code":""},{"path":"https://gamrot.github.io/godley/reference/plot_simulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot simulations of multiple variables in multiple scenarios — plot_simulation","text":"plotly plot","code":""},{"path":"https://gamrot.github.io/godley/reference/prepare.html","id":null,"dir":"Reference","previous_headings":"","what":"Make initial matrix row for baseline scenario and prepare equations for simulate_scenario() — prepare","title":"Make initial matrix row for baseline scenario and prepare equations for simulate_scenario() — prepare","text":"Make initial matrix row baseline scenario prepare equations simulate_scenario()","code":""},{"path":"https://gamrot.github.io/godley/reference/prepare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make initial matrix row for baseline scenario and prepare equations for simulate_scenario() — prepare","text":"","code":"prepare(model, verbose = FALSE)"},{"path":"https://gamrot.github.io/godley/reference/prepare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make initial matrix row for baseline scenario and prepare equations for simulate_scenario() — prepare","text":"model SFC model object verbose logical tell additional model verbose displayed","code":""},{"path":"https://gamrot.github.io/godley/reference/prepare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make initial matrix row for baseline scenario and prepare equations for simulate_scenario() — prepare","text":"verified prepared SFC model object","code":""},{"path":"https://gamrot.github.io/godley/reference/restore_equation.html","id":null,"dir":"Reference","previous_headings":"","what":"Restore equation notation for warning messages — restore_equation","title":"Restore equation notation for warning messages — restore_equation","text":"function converts internally processed equation expression (e.g., `m[., 'Var']`) readable format (e.g., `Var`). function handles lagged variables, transforming expressions `m[.- 1, 'Var']` `Var[-1]`. intended use warning messages.","code":""},{"path":"https://gamrot.github.io/godley/reference/restore_equation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restore equation notation for warning messages — restore_equation","text":"","code":"restore_equation(eq_line)"},{"path":"https://gamrot.github.io/godley/reference/restore_equation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restore equation notation for warning messages — restore_equation","text":"eq_line character string representing equation internal indexing.","code":""},{"path":"https://gamrot.github.io/godley/reference/restore_equation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restore equation notation for warning messages — restore_equation","text":"character string internal indexing notation restored user-friendly form.","code":""},{"path":"https://gamrot.github.io/godley/reference/simulate_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate scenario of SFC model object — simulate_scenario","title":"Simulate scenario of SFC model object — simulate_scenario","text":"Simulate scenario SFC model object","code":""},{"path":"https://gamrot.github.io/godley/reference/simulate_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate scenario of SFC model object — simulate_scenario","text":"","code":"simulate_scenario(   model,   scenario,   periods = NA,   start_date = NA,   method = \"Gauss\",   max_iter = 350,   tol = 1e-05,   hidden_tol = 0.1,   verbose = FALSE )"},{"path":"https://gamrot.github.io/godley/reference/simulate_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate scenario of SFC model object — simulate_scenario","text":"model SFC model object scenario vector strings single string name scenario(s) simulate periods numeric total number rows (periods) model, defaults 100 start_date character date begin simulation format \"yyyy-mm-dd\" method string name method used find solution chosen : 'Gauss', 'Newton', defaults 'Gauss' max_iter numeric maximum iterations allowed per period, defaults 350 tol numeric tolerance accepted determine convergence, defaults 1e-05 hidden_tol numeric error tolerance accept equality hidden equations, defaults 0.1. verbose logical tell additional model verbose displayed","code":""},{"path":"https://gamrot.github.io/godley/reference/simulate_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate scenario of SFC model object — simulate_scenario","text":"updated model containing simulated scenario(s)","code":""}]
